(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{465:function(t,a,s){t.exports=s.p+"assets/img/navigation.2d1a795e.png"},466:function(t,a,s){t.exports=s.p+"assets/img/tcp-third.55873bce.png"},467:function(t,a,s){t.exports=s.p+"assets/img/reverse-proxy.7a99407d.png"},537:function(t,a,s){"use strict";s.r(a);var e=s(65),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"从浏览器输入网址到页面加载-中间发生了什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#从浏览器输入网址到页面加载-中间发生了什么"}},[t._v("#")]),t._v(" 从浏览器输入网址到页面加载，中间发生了什么？")]),t._v(" "),e("p",[t._v("作为前端，这个问题经常作为面试题出现用来考察你的知识体系。最近在做浏览器方面的专题，看了"),e("a",{attrs:{href:"https://book.douban.com/subject/25910556/",target:"_blank",rel:"noopener noreferrer"}},[t._v("WebKit技术内幕"),e("OutboundLink")],1),t._v("和网上的一些文章，结合自己的理解，来详细阐述下具体的步骤。")]),t._v(" "),e("h2",{attrs:{id:"总体流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总体流程"}},[t._v("#")]),t._v(" 总体流程")]),t._v(" "),e("p",[e("img",{attrs:{src:s(465),alt:"流程图"}}),t._v("\n从用户输入url，到网页加载成功，大体来说可以分为以下几个步骤：")]),t._v(" "),e("ol",[e("li",[t._v("URL 解析")]),t._v(" "),e("li",[t._v("DNS 寻址：将域名解析成 IP 地址")]),t._v(" "),e("li",[t._v("建立 TCP 连接：TCP 三次握手")]),t._v(" "),e("li",[t._v("发送 HTTP 请求")]),t._v(" "),e("li",[t._v("服务器处理请求并返回 HTTP 报文")]),t._v(" "),e("li",[t._v("浏览器接收响应并解析渲染页面")]),t._v(" "),e("li",[t._v("断开连接：TCP 四次挥手")])]),t._v(" "),e("h2",{attrs:{id:"_1-url解析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-url解析"}},[t._v("#")]),t._v(" 1. URL解析")]),t._v(" "),e("h3",{attrs:{id:"_1-1-解析输入"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-解析输入"}},[t._v("#")]),t._v(" 1.1 解析输入")]),t._v(" "),e("p",[t._v("用户在浏览器地址栏输入内容，浏览器主进程的UI线程会解析你的输入，看看输入的内容是否符合 "),e("code",[t._v("URL规则")]),t._v("：")]),t._v(" "),e("ul",[e("li",[t._v("不符合，则拼接成默认搜索引擎加关键字的 URL 进行搜索；")]),t._v(" "),e("li",[t._v("符合，则会解析URL提取出协议、域名、端口号，对于一些特殊字符，在传递的时候还需要进行编码解码。")])]),t._v(" "),e("h3",{attrs:{id:"_1-2-处理url并发送http请求"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-处理url并发送http请求"}},[t._v("#")]),t._v(" 1.2 处理URL并发送HTTP请求")]),t._v(" "),e("p",[t._v("敲击回车，给网址加上协议头，浏览器主进程便将该URL转发给网络线程（在内存资源足够时，浏览器进程会将网络线程拆分成独立的网络进程，甚至UI线程也会单独拆分）。")]),t._v(" "),e("p",[t._v("UI线程将请求地址传递给网线线程时，UI线程就已经知道了要访问的站点。此时UI线程就可以开始查找或启动一个渲染进程，这个动作与让网络线程下载数据是同时的。如果网络线程按照预期获取到数据，则渲染进程就已经可以开始渲染了，这个动作减少了从网络线程开始请求数据到渲染进程可以开始渲染页面的时间。")]),t._v(" "),e("p",[t._v("随后网络线程会依次查找 "),e("code",[t._v("Memory Cache")]),t._v("、"),e("code",[t._v("Disk Cache")]),t._v(" 中是否有缓存内容，有且没过期则使用，否则则发送http请求。")]),t._v(" "),e("h3",{attrs:{id:"_1-3-延伸阅读"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-延伸阅读"}},[t._v("#")]),t._v(" 1.3 延伸阅读")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://www.barretlee.com/blog/2015/10/22/hsts-intro/",target:"_blank",rel:"noopener noreferrer"}},[t._v("你所不知道的 HSTS"),e("OutboundLink")],1),t._v("：HSTS（HTTP Strict Transport Security），简单说就是强制客户端使用 HTTPS 访问页面，这个过程有效避免了中间人对 80 端口的劫持，同时也为浏览器节省来一次 302/301 的跳转请求。")]),t._v(" "),e("p",[e("RouterLink",{attrs:{to:"/blog/broswer/broswer-framework.html#浏览器多进程架构"}},[t._v("浏览器多进程架构")]),t._v("：webkit2、blink内核浏览器都采用了多进程架构模式，这有助于增强浏览器的稳定性和安全性。")],1),t._v(" "),e("h2",{attrs:{id:"_2-dns寻址"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-dns寻址"}},[t._v("#")]),t._v(" 2. DNS寻址")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("名称解释")]),t._v(" "),e("p",[e("strong",[t._v("IP地址（IP Address）")]),t._v("：指互联网协议地址。是"),e("code",[t._v("IP协议")]),t._v("提供的一种统一的地址格式，IP协议为每一个连接互联网的设备（不管是交换机、PC还是其他设备）分配一个逻辑地址，以此来屏蔽物理地址的差异。IP地址分为"),e("code",[t._v("IPv4")]),t._v("和"),e("code",[t._v("IPv6")]),t._v("两种，"),e("code",[t._v("IPv4")]),t._v("使用4字节共32位（如192.168.1.1）地址，我们记起来可能会好点，而"),e("code",[t._v("IPv6")]),t._v("地址共16字节128位（如2408:8207:250d:76c0:c872:b2d4:3900:d000），纯靠人力几乎就不可能记忆了，所以这也就限制了直接使用ip地址进行访问，于是域名以及DNS服务便应运而生。")]),t._v(" "),e("p",[e("strong",[t._v("域名（Domain）")]),t._v("：如果说IP地址相当于你的身份证，那么域名就相当于你独一无二的网名。如："),e("code",[t._v("baidu.com")]),t._v("，它的作用就是便于记忆，那为什么机器在处理IP数据报时要使用IP地址而不使用域名呢？这是因为IP地址的长度是固定的32位（IPv4固定32位），而域名长度不是固定的，机器处理起来比较困难。")])]),t._v(" "),e("p",[t._v("浏览器请求网址页面，首先得经过域名解析，因为浏览器并不能直接通过域名找到对应的服务器，而是要通过 IP地址。")]),t._v(" "),e("h3",{attrs:{id:"_2-1-什么是域名解析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-什么是域名解析"}},[t._v("#")]),t._v(" 2.1 什么是域名解析")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://baike.baidu.com/item/dns%E5%8D%8F%E8%AE%AE/1860066",target:"_blank",rel:"noopener noreferrer"}},[t._v("DNS协议"),e("OutboundLink")],1),t._v("提供通过域名查找 IP 地址，或逆向从 IP 地址反查域名的服务。"),e("code",[t._v("DNS服务器")]),t._v(" 是一台专门处理DNS协议的网络服务器，我们的域名解析简单来说就是在 "),e("code",[t._v("DNS服务器")]),t._v(" 上查找或者添加一条信息记录。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("baidu.com  39.156.66.10（服务器外网IP地址）80（服务器端口号）\n")])])]),e("h3",{attrs:{id:"_2-2-dns寻址流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-dns寻址流程"}},[t._v("#")]),t._v(" 2.2 DNS寻址流程")]),t._v(" "),e("ol",[e("li",[t._v("浏览器缓存中找：浏览器会按照一定的频率缓存 DNS 记录；")]),t._v(" "),e("li",[t._v("操作系统缓存中找：操作系统也有自己的 DNS缓存，如果浏览器缓存中找不到需要的 DNS记录，则会在操作系统存在本地的Hosts文件里找，没有的话则向 DNS 服务器发送查询请求；")]),t._v(" "),e("li",[t._v("路由缓存中找：路由器也有 DNS 缓存；")]),t._v(" "),e("li",[t._v("从ISP（Internet Service Provider：互联网服务提供商）的 DNS服务器中找：ISP DNS 就是在客户端电脑上设置的首选 DNS 服务器，它们在大多数情况下都会有缓存。如果在路由器中找不到DNS缓存的话，就去ISP的DNS服务器中找；")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E6%A0%B9%E7%B6%B2%E5%9F%9F%E5%90%8D%E7%A8%B1%E4%BC%BA%E6%9C%8D%E5%99%A8",target:"_blank",rel:"noopener noreferrer"}},[t._v("根域名服务器"),e("OutboundLink")],1),t._v("查询：在前面所有步骤没有缓存的情况下，本地 DNS 服务器会将请求转发到互联网上的根域，进行"),e("code",[t._v("递归查询")]),t._v("：")])]),t._v(" "),e("ul",[e("li",[t._v("根域名服务器查找www.baidu.com所对应的ip，有，则返回ip到本地域名服务商；")]),t._v(" "),e("li",[t._v("根域名服务器未找到相应ip，则会返回一级域名（.com）服务器地址给本地域名服务商；")]),t._v(" "),e("li",[t._v("在一级域名服务器查询www.baidu.com，有，则返回；")]),t._v(" "),e("li",[t._v("一级域名服务器未找到相应ip，则返回二级域名(.baidu.com)服务器地址给本地域名服务商；")]),t._v(" "),e("li",[t._v("在二级域名服务器中查询www.baidu.com")]),t._v(" "),e("li",[t._v("二级域名服务器查看本地name.conf，是否有www主机的记录")]),t._v(" "),e("li",[t._v("查到www主机的记录，返回www主机的ip到二级域名服务器")]),t._v(" "),e("li",[t._v("二级域名服务器返回ip到本地域名服务器")]),t._v(" "),e("li",[t._v("本地域名服务器返回ip到浏览器")])]),t._v(" "),e("h3",{attrs:{id:"_2-3-优化方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-优化方案"}},[t._v("#")]),t._v(" 2.3 优化方案")]),t._v(" "),e("p",[t._v("一般来说，一次DNS解析需要耗费 20-120ms，所以为了优化DNS，我们可以考虑两个方向：")]),t._v(" "),e("ul",[e("li",[t._v("减少DNS请求次数 - 减少Host主机数")]),t._v(" "),e("li",[t._v("缩短DNS解析时间 - dns-prefetch")])]),t._v(" "),e("h4",{attrs:{id:"减少主机数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#减少主机数"}},[t._v("#")]),t._v(" 减少主机数")]),t._v(" "),e("p",[t._v("主机数很多的情况下，虽然可以最大化增加页面并行http请求数量，但是由于DNS解析（特别是第一次访问，没有浏览器缓存和系统缓存的情况下）时长增加，用户网络带宽受限，用户设备CPU占用率变高（并行下载数量越大，CPU占用率越高），也会导致响应时长变慢。")]),t._v(" "),e("p",[t._v("这时候减少主机数，可以减少DNS请求次数，但是却会减少网站的并行http请求数量，也会导致响应时间变慢。")]),t._v(" "),e("p",[t._v("雅虎军规建议，单个页面主机数建议设置为2-4个。")]),t._v(" "),e("h4",{attrs:{id:"dns-prefetch-和-preconnect"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dns-prefetch-和-preconnect"}},[t._v("#")]),t._v(" dns-prefetch 和 preconnect")]),t._v(" "),e("p",[e("code",[t._v("dns-prefetch")]),t._v("（DNS预获取）是前端网络性能优化的一种措施。它根据浏览器定义的规则，提前解析之后可能会用到的域名（可能是后面要加载的文件，也可能是用户尝试打开的链接目标），使解析结果缓存到"),e("code",[t._v("系统缓存")]),t._v("中，缩短DNS解析时间，进而提高网站的访问速度。")]),t._v(" "),e("p",[t._v("如果某一时间内，有多个请求都发送给同一个服务器，那么DNS解析会多次并且重复触发。这样会导致整体的网页加载有延迟的情况。虽然DNS解析占用不了多大带宽，但是它会产生很高的延迟，尤其是对于移动网络会更为明显。")]),t._v(" "),e("p",[t._v("因此，为了减少DNS解析产生的延迟，我们可以通过dns-prefetch预解析技术有效地缩短DNS解析时间。")]),t._v(" "),e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("link")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("rel")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("dns-prefetch"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("href")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("https://sta.xxx.com/"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" \n")])])]),e("p",[t._v("如果站点是通过HTTPS服务的，"),e("code",[t._v("dns-prefetch")]),t._v(" 与 "),e("code",[t._v("preconnect(预连接)")]),t._v(" 的组合会涵盖DNS解析，建立TCP连接以及执行TLS握手。将两者结合起来可提供进一步减少跨域请求的感知延迟的机会。如下所示：")]),t._v(" "),e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("link")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("rel")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("preconnect"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("href")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("https://sta.xxx.com/"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("crossorigin")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("link")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("rel")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("dns-prefetch"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("href")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("https://sta.xxx.com/"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),e("p",[t._v("ps：如果页面需要建立与许多第三方域的连接，则将它们预先连接会适得其反。 "),e("code",[t._v("preconnect")]),t._v(" 提示最好仅用于最关键的连接（比如js和css资源的cdn域名连接）。对于其他的，只需使用 "),e("link",{attrs:{rel:"dns-prefetch"}}),t._v(" 即可节省第一步的时间DNS查找。")]),t._v(" "),e("h3",{attrs:{id:"_2-4-延伸阅读"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-延伸阅读"}},[t._v("#")]),t._v(" 2.4 延伸阅读")]),t._v(" "),e("ul",[e("li",[e("p",[e("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/377974683",target:"_blank",rel:"noopener noreferrer"}},[t._v("什么是 DNS 劫持"),e("OutboundLink")],1),t._v("：DNS劫持也被称为域名劫持或者是DNS重定向，最直接的后果就是将用户重定向到恶意站点或者是让我们的网页直接打不开。")])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://juejin.cn/post/7031815988031160328",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端 dns-prefetch 优化"),e("OutboundLink")],1),t._v("：配置"),e("code",[t._v("dns-prefetch")]),t._v("，可以使下一次DNS解析时长低至0-1ms。")])])]),t._v(" "),e("h2",{attrs:{id:"_3-建立tcp连接"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-建立tcp连接"}},[t._v("#")]),t._v(" 3 建立TCP连接")]),t._v(" "),e("p",[t._v("tcp连接建立是在传输层做的事，在建立连接前，会先进行 TCP 三次握手。")]),t._v(" "),e("h3",{attrs:{id:"_3-1-tcp-三次握手"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-tcp-三次握手"}},[t._v("#")]),t._v(" 3.1 TCP 三次握手")]),t._v(" "),e("p",[e("img",{attrs:{src:s(466),alt:"三次握手时序图"}}),t._v(" "),t._v("\n最开始的时候两端的TCP进程都是处于CLOSED（关闭）状态。主动打开连接的为客户端，被动打开连接的是服务器。")]),t._v(" "),e("h4",{attrs:{id:"tcp三次握手时序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tcp三次握手时序"}},[t._v("#")]),t._v(" tcp三次握手时序")]),t._v(" "),e("ul",[e("li",[e("ol",[e("li",[t._v("TCP服务器进程先创建 "),e("strong",[t._v("传输控制块TCB")]),t._v("（TCB中存储了每个连接中的一些重要消息，如：TCP连接表，到发送和接收缓存的指针，到重传队列的指针，当前的发送和接收序号等），时刻准备接受客户进程的连接请求，此时服务器进程就进入了LISTEN（监听）状态；")])])]),t._v(" "),e("li",[e("ol",{attrs:{start:"2"}},[e("li",[t._v("第一次握手：TCP客户进程也是先创建 "),e("strong",[t._v("传输控制块TCB")]),t._v("，然后向服务器发出连接请求报文段，这时报文首部中的同部位"),e("code",[t._v("SYN = 1")]),t._v("，同时随机的选择一个初始序列号 "),e("code",[t._v("seq = x")]),t._v("（随机化选择可以避免某些安全性攻击），并将此序列号放在该"),e("code",[t._v("起始SYN报文段")]),t._v("的序号字段中，此时，TCP客户端进程进入了 "),e("code",[t._v("SYN-SENT")]),t._v("（同步已发送状态）状态。"),e("red",[t._v("TCP协议规定，SYN 报文段（SYN = 1的报文段）不能携带数据，但需要消耗掉一个序号")]),t._v("。")],1)])]),t._v(" "),e("li",[e("ol",{attrs:{start:"3"}},[e("li",[t._v("第二次握手：服务器收到请求报文后，传输层会从IP数据报中提取出"),e("code",[t._v("SYN报文段")]),t._v("，如果同意连接，则为该TCP链接分配TCP缓存和变量，并发出确认报文。在确认报文段中应把 ACK位和SYN位都置为1，确认号"),e("code",[t._v("ack = x+1")]),t._v("，同时也要为自己初始化一个序列号 "),e("code",[t._v("seq = y")]),t._v("，此时，TCP服务器进程进入了 "),e("code",[t._v("SYN-RCVD")]),t._v("（同步收到）状态。"),e("red",[t._v("这个TCP报文段也不能携带数据，但是同样要消耗一个序号")]),t._v("。")],1)])]),t._v(" "),e("li",[e("ol",{attrs:{start:"4"}},[e("li",[t._v("第三次握手：TCP客户进程收到确认后，也要给该连接分配TCP缓存和变量，还要向服务器给出确认。确认报文段的"),e("code",[t._v("ACK=1")]),t._v("，确认号"),e("code",[t._v("ack = y+1")]),t._v("，自己的序列号"),e("code",[t._v("seq = x+1")]),t._v("，此时，TCP连接建立，客户端进入ESTABLISHED（已建立连接）状态。"),e("red",[t._v("TCP规定，ACK报文段可以携带数据（HTTP请求报文），但是如果不携带数据则不消耗序号")]),t._v("。")],1)])]),t._v(" "),e("li",[e("ol",{attrs:{start:"5"}},[e("li",[t._v("当服务器收到客户端的确认后也进入"),e("red",[t._v("ESTABLISHED状态")]),t._v("，此后双方就可以开始通信了。")],1)])])]),t._v(" "),e("h4",{attrs:{id:"为什么客户端还要发送一次确认"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么客户端还要发送一次确认"}},[t._v("#")]),t._v(" 为什么客户端还要发送一次确认？")]),t._v(" "),e("p",[t._v("这主要是为了防止"),e("code",[t._v("已失效的连接请求报文段")]),t._v("突然又传给了服务端，因而产生错误。")]),t._v(" "),e("p",[t._v("正常情况下客户端发出连接请求后，如果因为连接请求报文丢失而未收到确认，于是客户端会重新发送连接请求。后来客户端收到确认后，就建立了连接。数据传输完毕后，就释放了连接。这种情况下客户端发送了两个连接请求报文段，其中第一个丢失，第二个到达了服务端。没有“已失效的连接请求报文段”。")]),t._v(" "),e("p",[t._v("但如果出现了一种异常情况，即客户端发出的第一个链接请求报文段没有丢失，而是因为各种原因在某些网络节点长时间滞留，以致延误到连接释放后的某个时间点才到达服务端。这本应该是一个“已失效的连接请求报文段”，但服务端收到后，误以为是客户端又发起了一次新的连接请求，于是向客户端发出确认报文段，同意建立连接。")]),t._v(" "),e("p",[e("red",[t._v("假如没有第三次握手，那么只要服务端发出确认，新的连接便已经建立，便一直等待客户端发来的数据（当然由于保活机制，也不会无限等待下去）。但是此时客户端没有发出新的建立连接的请求，也不会向服务端发送数据，这时候许多服务器资源便被浪费了。")])],1),t._v(" "),e("h4",{attrs:{id:"如果已经建立了连接-但是客户端突然出了问题怎么办"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如果已经建立了连接-但是客户端突然出了问题怎么办"}},[t._v("#")]),t._v(" 如果已经建立了连接，但是客户端突然出了问题怎么办？")]),t._v(" "),e("p",[t._v("TCP协议设有一个"),e("code",[t._v("保活计时器（keepalive timer）")]),t._v("，如果客户端出了问题，服务器不会一直等下去，浪费资源。服务器每收到一次客户端的请求后都会重新复位保活计时器，时间通常设置为两小时，如果两小时过后还没有收到客户端发来的数据，服务器就会发送一个"),e("code",[t._v("探测报文段")]),t._v("，以后每隔75秒发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。")]),t._v(" "),e("h3",{attrs:{id:"_3-2-优化方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-优化方案"}},[t._v("#")]),t._v(" 3.2 优化方案")]),t._v(" "),e("p",[t._v("每一个http请求都会打开一个tcp socket连接（三次握手），当交互完毕后会关闭这个连接（四次挥手）。客户端和服务器端每次建立和关闭连接都是一个相对比较费时的过程，并且会严重影响客户机和服务器的性能。")]),t._v(" "),e("h4",{attrs:{id:"http连接复用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http连接复用"}},[t._v("#")]),t._v(" http连接复用")]),t._v(" "),e("p",[t._v("如果我们当前网页中，可能引入了几十个js、css文件，上百张图片，如果每请求一个资源，就创建一个连接，然后关闭，代价实在太大了。")]),t._v(" "),e("p",[t._v("那么我们可以在HTTP/1.0请求头中加上"),e("code",[t._v("Connection: keep-alive")]),t._v("，但是得服务端配置支持长连接，或者升级到HTTP/1.1（默认开启keep-alive）。以便在加载同一个网页中的内容时，尽量的复用连接。（如果 HTTP 服务存在长轮询或较长间隔请求，而且超过 "),e("code",[t._v("Keep-Alive")]),t._v(" 的设置（比如 Keep-Alive 5 秒，但轮询周期是 6 秒），则可能会造成大量的无用途连接，白白占用系统资源。）")]),t._v(" "),e("p",[e("red",[t._v("但是keep-alive长连接中，请求是串行发送的，而且由于HTTP/1.x是纯文本协议，在资源块（resource chunks）之间不使用分隔符（响应只能按序接收），这就可能存在"),e("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/330300133",target:"_blank",rel:"noopener noreferrer"}},[t._v("队头阻塞（Head-of-Line blocking）"),e("OutboundLink")],1),t._v("问题")]),t._v("（比如第一个请求文件特别大，阻塞了后面文件请求的响应）。")],1),t._v(" "),e("h4",{attrs:{id:"http-2多路复用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-2多路复用"}},[t._v("#")]),t._v(" HTTP/2多路复用")]),t._v(" "),e("p",[t._v("启用"),e("code",[t._v("HTTP/2")]),t._v("协议（传输性能得到提升）。HTTP/2（每块资源都是二进制流，在每个资源块前添加了数据帧，有id可以标识响应的数据属于哪个请求）不仅能够实现TCP复用，并且解决了队头阻塞问题（可以并行交错的请求和响应，哪个请求响应的快，就先接收哪个响应体）。")]),t._v(" "),e("h3",{attrs:{id:"_3-3-延伸阅读"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-延伸阅读"}},[t._v("#")]),t._v(" 3.3 延伸阅读")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://baike.baidu.com/item/SYN%E6%94%BB%E5%87%BB/14762413",target:"_blank",rel:"noopener noreferrer"}},[t._v("SYN洪泛攻击"),e("OutboundLink")],1),t._v("：攻击者发送大量的TCP SYN报文段，而不完成第三步握手的步骤。而服务器不断为这种半开连接分配资源，等待确认，导致服务器连接资源耗尽。（由于第二次握手服务端会分配TCP缓存和变量，使得TCP易于收到SYN洪泛的拒绝服务攻击）。")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/330300133",target:"_blank",rel:"noopener noreferrer"}},[t._v("队头阻塞（Head-of-Line blocking）"),e("OutboundLink")],1),t._v("：带你了解什么叫队头阻塞，以及http/1.x、http/2、http/3上队头阻塞的区别。")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/ljianshu/Blog/issues/50",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入理解HTTPS工作原理"),e("OutboundLink")],1),t._v("：HTTPS协议的本质就是"),e("code",[t._v("HTTP + SSL(or TLS)")]),t._v("。在HTTP报文传递给传输层之前，先用SSL对HTTP报文进行加密。从层级结构来看它位于HTTP协议与传输层之间。HTTPS在传输数据之前需要客户端与服务器进行一个握手(TLS/SSL握手)，在握手过程中将确立双方加密传输数据的密码信息。TLS/SSL使用了非对称加密，对称加密以及hash等。")]),t._v(" "),e("h2",{attrs:{id:"_4-发送http请求"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-发送http请求"}},[t._v("#")]),t._v(" 4 发送HTTP请求")]),t._v(" "),e("p",[t._v("HTTP请求报文结构：")]),t._v(" "),e("div",{staticClass:"language-md extra-class"},[e("pre",{pre:!0,attrs:{class:"language-md"}},[e("code",[t._v("  "),e("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("-")]),t._v(" 请求行（Request Line）：请求方法、请求资源URL、HTTP协议版本号（如：GET /index.html HTTP/1.1）\n  "),e("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("-")]),t._v(" 首部行（Request Header）：用来说明浏览器、服务器或报文主体的一些信息。由 参数/值 对组成\n  "),e("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("-")]),t._v(" 请求实体：请求报文中传给服务端的具体参数\n")])])]),e("h3",{attrs:{id:"_4-1-客户端主机封装http请求报文"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-客户端主机封装http请求报文"}},[t._v("#")]),t._v(" 4.1 客户端主机封装http请求报文")]),t._v(" "),e("blockquote",[e("p",[t._v("ps：如果uri资源被强缓存，则会直接从本地读取，不会发送http请求。\n客户端请求从应用层往下走进行数据“封装”：")])]),t._v(" "),e("ul",[e("li",[e("p",[e("red",[t._v("应用层")]),t._v("通过DNS协议解析域名得到网站的IP地址后，构造一个 HTTP请求报文，然后把报文传递给传输层；")],1)]),t._v(" "),e("li",[e("p",[e("red",[t._v("传输层")]),t._v(" 收到报文后，会将请求的数据包进行拆分，打包，并对每个包裹打上tag。在请求报文的基础上，加上一层TCP的首部信息（包括序号和端口号），然后发往网络层；")],1)]),t._v(" "),e("li",[e("p",[e("red",[t._v("网络层")]),t._v(" 到了网络层以后，IP协议就发挥了巨大的作用，IP协议中需要两个比较重要的信息，那就是ip地址和mac地址。网络层在首部加入源及目标的IP地址后，将数据段打包成IP数据报，并且在通过ARP协议反向查询到目标主机的mac地址后，一起把数据传递到链路层；")],1)]),t._v(" "),e("li",[e("p",[e("red",[t._v("链路层")]),t._v(" 接收IP数据包后添加首部（源以及目标的mac地址等）和尾部封装成帧，并通过网络发送。")],1)])]),t._v(" "),e("h3",{attrs:{id:"_4-2-优化方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-优化方案"}},[t._v("#")]),t._v(" 4.2 优化方案")]),t._v(" "),e("p",[t._v("针对http请求、减轻服务器压力的优化方案，那就是减少HTTP请求数。")]),t._v(" "),e("h4",{attrs:{id:"静态资源配置cdn"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#静态资源配置cdn"}},[t._v("#")]),t._v(" 静态资源配置CDN")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://en.wikipedia.org/wiki/Content_delivery_network",target:"_blank",rel:"noopener noreferrer"}},[t._v("CDN"),e("OutboundLink")],1),t._v("就用到了DNS的重定向技术（DNS可以根据服务器运行情况，比如每台机器的负载量，该机器离用户地理位置的距离等等，及时适当的调整调度策略，返回一个合适的服务器IP地址给客户端），CDN返回一个合适的服务器IP地址给客户端，然后CDN节点服务器响应客户端的请求，提供所需的内容。")]),t._v(" "),e("p",[t._v("终端用户"),e("code",[t._v("80-90%")]),t._v("的响应时间都花在了下载页面文件（"),e("code",[t._v("js、css、字体、图片、视频等")]),t._v("）上，我们对静态资源配置CDN，不仅可以提高请求的并发数（"),e("code",[t._v("HTTP1.0/1.1 协议")]),t._v("限定单个域名的请求并发量是 6 个），而且能够减轻项目服务器压力，大幅提高用户的响应速度。")]),t._v(" "),e("h4",{attrs:{id:"配置强缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置强缓存"}},[t._v("#")]),t._v(" 配置强缓存")]),t._v(" "),e("p",[t._v("针对js、css、图片等文件，可以在请求/响应Header的 "),e("code",[t._v("Cache-Control")]),t._v(" 属性的 "),e("code",[t._v("max-age")]),t._v(" 可以设置一个较长的时间，以便能够减少http请求。")]),t._v(" "),e("p",[t._v("浏览器缓存详解，可以点击"),e("RouterLink",{attrs:{to:"/blog/broswer/http-cache.html"}},[t._v("查看")]),t._v("。")],1),t._v(" "),e("h4",{attrs:{id:"懒加载-按需加载"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#懒加载-按需加载"}},[t._v("#")]),t._v(" 懒加载，按需加载")]),t._v(" "),e("p",[t._v("很多页面浏览量虽然很大，但其实很大比例用户扫完第一屏就直接跳走了，第一屏以下的内容用户根本就不感兴趣。 对于超大流量的网站，这个问题尤其重要。这时可根据用户的行为对组件、图片、接口等资源进行按需加载，用户用到了就去加载，用不到就不去加载。")]),t._v(" "),e("h4",{attrs:{id:"资源合并"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#资源合并"}},[t._v("#")]),t._v(" 资源合并")]),t._v(" "),e("p",[t._v("对于网站里使用的体积不大的图标，可以采用 "),e("code",[t._v("雪碧图（CSS Sprite）")]),t._v(" 的方式进行image合并，这样可以大幅度的减少资源请求。")]),t._v(" "),e("h4",{attrs:{id:"inline-images-或-svg"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#inline-images-或-svg"}},[t._v("#")]),t._v(" Inline Images 或 SVG")]),t._v(" "),e("p",[t._v("对于体积非常小的图标可以使用 "),e("code",[t._v("base64")]),t._v(" 的方式将嵌入到js或css文件中；")]),t._v(" "),e("p",[t._v("另外可以使用类似于SVG的字体图标来代替图片。")]),t._v(" "),e("h4",{attrs:{id:"cookie瘦身"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cookie瘦身"}},[t._v("#")]),t._v(" cookie瘦身")]),t._v(" "),e("p",[t._v("http请求header中cookie的大小，会影响http请求速度，我们可以从3个方面去减少当前域http请求携带cookie的大小：")]),t._v(" "),e("ul",[e("li",[t._v("缩减整站cookie体积，非必要不使用cookie；")]),t._v(" "),e("li",[t._v("给cookie设置合适的域级别和path，以免影响其它子域和页面；")]),t._v(" "),e("li",[t._v("设置合适的有效期，更早的有效期或者none可以更快的删除cookie；")])]),t._v(" "),e("h3",{attrs:{id:"_4-3-延伸阅读"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-延伸阅读"}},[t._v("#")]),t._v(" 4.3 延伸阅读")]),t._v(" "),e("ul",[e("li",[e("p",[e("RouterLink",{attrs:{to:"/blog/computer/tcp-ip.html"}},[t._v("TCP/IP协议四层架构详解")]),t._v("：TCP/IP协议中每层协议、功能、及工作原理详细解析。")],1)]),t._v(" "),e("li",[e("p",[e("RouterLink",{attrs:{to:"/blog/broswer/http.html"}},[t._v("HTTP详解")]),t._v("：详细解析了HTTP协议中各个字段的作用。")],1)])]),t._v(" "),e("h2",{attrs:{id:"_5-服务器处理请求并返回-http-响应报文"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-服务器处理请求并返回-http-响应报文"}},[t._v("#")]),t._v(" 5 服务器处理请求并返回 HTTP 响应报文")]),t._v(" "),e("h3",{attrs:{id:"_5-1-服务器主机传递http请求报文"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-服务器主机传递http请求报文"}},[t._v("#")]),t._v(" 5.1 服务器主机传递http请求报文")]),t._v(" "),e("p",[t._v("服务器主机接收完帧数据后，需要从链路层往上走进行数据“分片”：")]),t._v(" "),e("ul",[e("li",[e("red",[t._v("链路层")]),t._v(" 从网络上接收mac帧，抽出IP数据报，交给网络层；")],1),t._v(" "),e("li",[e("red",[t._v("网络层")]),t._v(" 接收IP数据报后，抽出TCP报文段，交给传输层；")],1),t._v(" "),e("li",[e("red",[t._v("传输层")]),t._v(" 接收TCP报文段后，剥离出HTTP请求报文，交给应用层对应的程序；")],1)]),t._v(" "),e("h3",{attrs:{id:"_5-2-服务器处理请求并返回http响应报文"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-服务器处理请求并返回http响应报文"}},[t._v("#")]),t._v(" 5.2 服务器处理请求并返回http响应报文")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("名称解释")]),t._v(" "),e("p",[e("red",[t._v("Web Server")]),t._v("，又称web服务器，可以解析HTTP协议。当Web服务器接收到一个HTTP请求(request)，通常会响应一个HTML文件，使浏览器可以浏览。对于不同客户机发送的HTTP请求报文，会结合配置文件，把不同HTTP请求委托给服务器上处理相应请求的程序进行处理（例如 CGI 脚本，JSP 脚本，servlets，ASP 脚本，服务器端 JavaScript，或者一些其它的服务器端技术等），然后返回后台程序处理产生的结果作为响应。")],1),t._v(" "),e("p",[t._v("每台承载网页的服务器上都会安装处理请求的web服务器。Apache、Tomcat、Nginx、IIS、"),e("a",{attrs:{href:"https://baike.baidu.com/item/lighttpd",target:"_blank",rel:"noopener noreferrer"}},[t._v("Lighttpd"),e("OutboundLink")],1),t._v(" 等web服务器监听接收到的请求后，会开启一个子进程或线程池去处理这个请求。")])]),t._v(" "),e("p",[t._v("比如访问"),e("code",[t._v("www.baidu.com")]),t._v("，web服务器在接收到HTTP报文后，会对HTTP报文进行解析（请求方法、域名、路径等），然后进行验证、处理请求。")]),t._v(" "),e("h4",{attrs:{id:"服务器验证流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#服务器验证流程"}},[t._v("#")]),t._v(" 服务器验证流程")]),t._v(" "),e("p",[t._v("包括：验证是否配置虚拟主机、URL是否接受GET方法、验证该用户是否可以使用GET方法（根据 IP 地址、身份信息等进行安全拦截）等。")]),t._v(" "),e("p",[t._v("由于本人对这块具体流程和原理了解不多，在此便不作具体分析。")]),t._v(" "),e("h4",{attrs:{id:"处理请求"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#处理请求"}},[t._v("#")]),t._v(" 处理请求")]),t._v(" "),e("p",[t._v("验证通过之后，然后会查看"),e("code",[t._v("URL重写规则")]),t._v("：")]),t._v(" "),e("ul",[e("li",[t._v("如果URL配置了 "),e("code",[t._v("HTTP重定向")]),t._v("（重定向也可能不会进行URL重写，得看具体服务器配置。作用是：SEO、短链转长链、防止盗链、自动语言转换等），就会返回一个 301/302 重定向响应，浏览器就会根据响应，重新发送 HTTP 请求。")]),t._v(" "),e("li",[t._v("如果没有进行 "),e("code",[t._v("URL重写")]),t._v("，并且请求的URL是一个真实存在的文件（比如图片、html、css、js文件等），服务器检查 HTTP 请求头是否包含"),e("code",[t._v("If-Modified-Since")]),t._v("、"),e("code",[t._v("If-No-Match")]),t._v(" 等缓存验证信息决定是否进行 "),e("code",[t._v("协商缓存")]),t._v("。如果资源无更新，继续使用本地缓存文件；否则，会直接把这个文件返回。")]),t._v(" "),e("li",[t._v("否则服务器会结合配置文件，把不同HTTP请求委托给服务器上处理相应请求的程序进行处理（例如 CGI 脚本，JSP 脚本，servlets，ASP 脚本，服务器端 JavaScript，或者一些其它的服务器端技术等），然后返回后台程序处理产生的结果作为响应。")])]),t._v(" "),e("h3",{attrs:{id:"_5-3-优化方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-优化方案"}},[t._v("#")]),t._v(" 5.3 优化方案")]),t._v(" "),e("h4",{attrs:{id:"web服务器配置反向代理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#web服务器配置反向代理"}},[t._v("#")]),t._v(" web服务器配置反向代理")]),t._v(" "),e("p",[e("img",{attrs:{src:s(467),alt:"反向代理"}}),t._v("\n以nginx服务器为例，如果配置了反向代理：")]),t._v(" "),e("ul",[e("li",[t._v("nginx服务器则会在缓存中查找请求内容，找到直接返回客户端；")]),t._v(" "),e("li",[t._v("nginx服务器未找到请求内容，则将请求代理至相应的服务器；")]),t._v(" "),e("li",[t._v("相应服务器处理请求并返回请求信息给nginx服务器，nginx服务器将请求信息返回给用户。")])]),t._v(" "),e("h5",{attrs:{id:"优点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[t._v("#")]),t._v(" 优点")]),t._v(" "),e("ul",[e("li",[t._v("保护服务器，外网只能访问到反向代理服务器，对真正提供服务的服务器起到了保护的作用")]),t._v(" "),e("li",[t._v("节约ip资源")]),t._v(" "),e("li",[t._v("负载均衡，减少WEB服务器压力，提高响应速度")]),t._v(" "),e("li",[t._v("解决ajax跨域问题")]),t._v(" "),e("li",[t._v("可对所有请求进行的统一控制；")]),t._v(" "),e("li",[t._v("……")])]),t._v(" "),e("h4",{attrs:{id:"服务端微服务化或配置服务器集群"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#服务端微服务化或配置服务器集群"}},[t._v("#")]),t._v(" 服务端微服务化或配置服务器集群")]),t._v(" "),e("blockquote",[e("p",[t._v("不知道大家有没有思考过一个问题: 访问某个大型网站DNS返回的IP地址是否每次都一样？如果每次都一样是否说明你请求的资源都位于同一台机器上面，那么这台机器需要多高的性能和储存才能满足亿万请求呢？")])]),t._v(" "),e("p",[t._v("服务端可以通过两种方案来满足海量请求：")]),t._v(" "),e("ul",[e("li",[t._v("一种是根据网站或服务的实际访问量，配置多台服务器或服务器集群，实现请求的负载均衡；")]),t._v(" "),e("li",[t._v("另一种是针对业务属性/数据模型的不同，将大型服务拆分多个微服务，然后根据服务访问规模，配置不同量级的服务器。")])]),t._v(" "),e("h4",{attrs:{id:"避免重定向"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#避免重定向"}},[t._v("#")]),t._v(" 避免重定向")]),t._v(" "),e("p",[t._v("避免重定向，可以减少一个HTTP往返时长和跳转的时间。可以在服务器中进行设置来避免它。")]),t._v(" "),e("h4",{attrs:{id:"杜绝404"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#杜绝404"}},[t._v("#")]),t._v(" 杜绝404")]),t._v(" "),e("p",[t._v("HTTP请求代价高昂，完全没有必要用一个HTTP请求去获取一个无用的响应（比如404 Not Found），只会拖慢用户体验而没有任何好处。")]),t._v(" "),e("h4",{attrs:{id:"页面主数据获取使用get"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#页面主数据获取使用get"}},[t._v("#")]),t._v(" 页面主数据获取使用GET")]),t._v(" "),e("p",[t._v("使用 XMLHttpRequest 时,浏览器的POST请求是通过一个两步的过程来实现的：先发送HTTP头,在发送数据。")]),t._v(" "),e("p",[t._v("所以最好用GET请求,它只需要发送一个TCP报文(除非cookie特别多)。")]),t._v(" "),e("h4",{attrs:{id:"请求文件带上etag"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#请求文件带上etag"}},[t._v("#")]),t._v(" 请求文件带上ETag")]),t._v(" "),e("p",[t._v("ETag是文件指纹（基于文件内容的MD5，由服务器端生成），用户端请求文件时在http请求头带上"),e("code",[t._v("If-No-Match")]),t._v("参数，值为ETag字符串，服务器发现是最新的文件不需要更新，则会命中协商缓存，响应一个304 Not Modified的状态码，这样就加快了响应速度。")]),t._v(" "),e("h4",{attrs:{id:"使用gzip压缩"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用gzip压缩"}},[t._v("#")]),t._v(" 使用Gzip压缩")]),t._v(" "),e("p",[t._v("对静态文件如js、css等使用Gzip/deflate压缩，能够减少响应体积，提升响应速度；浏览器在接收响应后，会自动解压。")]),t._v(" "),e("h2",{attrs:{id:"_6-浏览器接收响应并解析渲染页面"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-浏览器接收响应并解析渲染页面"}},[t._v("#")]),t._v(" 6 浏览器接收响应并解析渲染页面")]),t._v(" "),e("h3",{attrs:{id:"_6-1-接收响应"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-接收响应"}},[t._v("#")]),t._v(" 6.1 接收响应")]),t._v(" "),e("p",[t._v("HTTP响应报文结构：")]),t._v(" "),e("div",{staticClass:"language-md extra-class"},[e("pre",{pre:!0,attrs:{class:"language-md"}},[e("code",[t._v("  "),e("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("-")]),t._v(" 状态行（Status Line）：HTTP协议版本、状态码、响应状态信息（如：HTTP/1.1 200 OK）\n  "),e("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("-")]),t._v(" 首部行（Response Header）：用来说明浏览器、服务器或报文主体的一些信息。由 参数/值 对组成\n  "),e("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("-")]),t._v(" 响应正文：服务端返回的具体数据信息\n")])])]),e("p",[t._v("当网络线程接收到响应头数据之后，会执行下面的操作：")]),t._v(" "),e("ol",[e("li",[t._v("对资源进行分析，首先解析 响应头，并将响应头解析数据转发到浏览器进程，然后浏览器进程根据不同状态码做不同的事（比如上面提到的重定向）。")]),t._v(" "),e("li",[t._v("接下来，浏览器进程根据响应头里的"),e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types",target:"_blank",rel:"noopener noreferrer"}},[t._v("MIME类型"),e("OutboundLink")],1),t._v("去解析响应内容（比如 HTML、图片、字体、PDF等各有不同的解析方式）。"),e("red",[t._v("比如：假如响应头中"),e("code",[t._v("Content-Type")]),t._v(" 的值是"),e("code",[t._v("text/html")]),t._v("，那么浏览器进程就会判断这是一个 HTML 类型的文件， 发送 "),e("code",[t._v("“CommitNavigation(提交导航)”")]),t._v(" 消息到渲染进程。渲染进程接收到"),e("code",[t._v("“CommitNavigation”")]),t._v(" 消息后，便会和网络线程之间建立一个共享数据的管道，网络线程接收到数据后就往这个管道里面放，而渲染进程则从管道的另外一端不断地读取数据，并同时将读取的数据“喂”给 HTML 解析器。")]),t._v("你可以把这个管道想象成一个“水管”，网络线程接收到的字节流像水一样倒进这个“水管”，而“水管”的另外一端是渲染进程的 "),e("code",[t._v("HTML 解析器")]),t._v("，它会动态接收字节流，并将其解析为 DOM。\n"),e("ul",[e("li",[t._v("如果响应资源进行了压缩（比如 gzip），浏览器还需要进行解压；")]),t._v(" "),e("li",[t._v("在将数据传递给渲染进程之前，网络线程要先检查数据的安全性，这里也是浏览器保证安全的地方。如果返回的数据来自一些恶意的站点，网络线程会显示警告的页面。同时，"),e("code",[t._v("Cross Origin Read Blocking(CORB)")]),t._v(" 策略也会确保跨域的敏感数据不会被传递给渲染进程；")]),t._v(" "),e("li",[t._v("当所有的检查结束后，网络线程确信浏览器可以访问站点时，网络线程通知UI线程数据已经准备好了。UI线程会根据当前的站点找到一个渲染进程完成接下来的渲染工作；")])])],1),t._v(" "),e("li",[t._v("最后，响应资源接收完成之后，浏览器进程会对响应资源进行缓存（将返回的请求结果和缓存标识存入浏览器缓存中）。")])]),t._v(" "),e("h3",{attrs:{id:"_6-2-解析渲染页面"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-解析渲染页面"}},[t._v("#")]),t._v(" 6.2 解析渲染页面")]),t._v(" "),e("blockquote",[e("p",[t._v("HTML解析器并不是等整个文档加载完成之后再解析的，而是网络线程加载了多少数据，HTML 解析器便解析多少数据。")])]),t._v(" "),e("p",[t._v("解析HTML，CSS，构建DOM树和RenderObject树，布局分层和生成绘制列表等过程，都是在渲染进程上的主线程中执行的，如果解析HTML、构建DOM树过程中遇到JavaScript，那么它会暂停构建DOM，将控制权移交给JavaScript引擎，等JS代码执行完毕（在JS引擎线程中运行），浏览器再从中断的地方恢复DOM构建的执行。")]),t._v(" "),e("p",[t._v("想了解浏览器解析HTML到页面呈现到屏幕上的详细过程，请查看"),e("RouterLink",{attrs:{to:"/blog/broswer/render-mechanism.html#_2-渲染引擎核心过程"}},[t._v("浏览器渲染原理篇")]),t._v("。")],1),t._v(" "),e("p",[t._v("如果想了解浏览器解析HTML过程中，JavaScript引擎的执行机制及原理，请查看"),e("RouterLink",{attrs:{to:"/blog/broswer/js-mechanism.html"}},[t._v("JS执行机制篇")]),t._v("。")],1),t._v(" "),e("h3",{attrs:{id:"_6-3-优化方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-优化方案"}},[t._v("#")]),t._v(" 6.3 优化方案")]),t._v(" "),e("h4",{attrs:{id:"预加载"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#预加载"}},[t._v("#")]),t._v(" 预加载")]),t._v(" "),e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("link")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("rel")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("preload"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("as")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("script"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("href")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("xxx.js"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- 或 --\x3e")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("link")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("rel")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("modulepreload"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("href")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("xxx.js"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- 或 --\x3e")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("link")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("rel")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("prefetch"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("href")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("xxx.js"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),e("h5",{attrs:{id:"preload"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#preload"}},[t._v("#")]),t._v(" preload")]),t._v(" "),e("blockquote",[e("p",[t._v("preload的字体资源必须设置crossorigin属性，否则会导致重复加载。原因是如果不指定crossorigin属性(即使同源)，浏览器会采用匿名模式的CORS去preload，导致两次请求无法共用缓存。")])]),t._v(" "),e("p",[t._v("preload是一个预加载关键字。当浏览器“看”到这样的声明后，就会以一定的优先级在后台加载资源。加载完的资源放在HTTP缓存中。而等到要真正执行时，再按照正常方式用标签或者js代码加载，即可从HTTP缓存取出资源。实现了资源的加载和执行分离。")]),t._v(" "),e("p",[t._v("preload 是确定性会加载指定资源，比如在某个场景中，main.js 初始化后一定会加载 login.js 和 tabs.js, 则可以使用 preload 预先加载login.js和tabs.js；")]),t._v(" "),e("p",[t._v("详细使用指南可以前往"),e("a",{attrs:{href:"https://juejin.cn/post/6844903562070196237",target:"_blank",rel:"noopener noreferrer"}},[t._v("用 preload 预加载页面资源"),e("OutboundLink")],1),t._v("。")]),t._v(" "),e("h5",{attrs:{id:"modulepreload"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#modulepreload"}},[t._v("#")]),t._v(" modulepreload")]),t._v(" "),e("p",[t._v("modulepreload 和 preload 的功能一样，不过，前者是针对 module scripts 的，截止到2022.10月，只有 74.51% 的支持率。")]),t._v(" "),e("p",[t._v("Vite 有一个特性，自动为它的入口 chunk 和它的直接引用生成 modulepreload。同时，在 vite 的打包配置中，有 "),e("code",[t._v("build.polyfillModulePreload")]),t._v(" 这个配置。开启了它，就会自动给浏览器注入下面一段代码:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'vite/modulepreload-polyfill'")]),t._v("\n")])])]),e("p",[t._v("这段代码就是为了兼容那些不知道 ModulePreload 的浏览器。")]),t._v(" "),e("h5",{attrs:{id:"prefetch"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#prefetch"}},[t._v("#")]),t._v(" prefetch")]),t._v(" "),e("p",[t._v("要求浏览器在浏览器空闲时后台下载和缓存资源（如脚本或样式表或图片），下载以低优先级进行，因此不会干扰更重要的资源。当你知道在后续页面/组件需要该资源并且希望提前缓存时，可以使用 "),e("code",[t._v("prefetch")]),t._v("。")]),t._v(" "),e("p",[t._v("详细使用指南可以前往"),e("a",{attrs:{href:"https://juejin.cn/post/6893681741240909832",target:"_blank",rel:"noopener noreferrer"}},[t._v("使用 Preload&Prefetch 优化前端页面的资源加载"),e("OutboundLink")],1),t._v("。")]),t._v(" "),e("h4",{attrs:{id:"使用-async-或-defer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用-async-或-defer"}},[t._v("#")]),t._v(" 使用 async 或 defer")]),t._v(" "),e("blockquote",[e("p",[t._v("由于同步脚本会延迟 DOM 构建和呈现，因此您应该始终异步加载第三方脚本，除非脚本必须在页面呈现之前运行。")])]),t._v(" "),e("p",[t._v("async 和 defer 属性告诉浏览器其可以在后台加载脚本时继续解析 HTML，然后在加载后执行脚本。这样，脚本下载不会阻止 DOM 构建和页面呈现。")]),t._v(" "),e("p",[t._v("详细使用指南可以前往"),e("a",{attrs:{href:"https://juejin.cn/post/6894629999215640583",target:"_blank",rel:"noopener noreferrer"}},[t._v("图解 script 标签中的 async 和 defer 属性"),e("OutboundLink")],1),t._v("。")]),t._v(" "),e("h5",{attrs:{id:"async"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#async"}},[t._v("#")]),t._v(" async")]),t._v(" "),e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("async")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("src")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("script.js"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),e("p",[t._v("具有 async 属性的脚本在完成下载后和窗口加载事件之前第一时间执行。这意味着 async 脚本可能（并且很可能）不会按照它们在 HTML 中出现的顺序执行。这也意味着如果它们在解析器仍在工作时完成下载，他们可以中断 DOM 构建。\n"),e("img",{attrs:{src:"https://web-dev.imgix.net/image/admin/tCqsJ3E7m4lpKOprXu5B.png?auto=format&w=1600",alt:"async"}}),t._v("\n如果在加载过程中更早地运行脚本很重要，请使用 async。")]),t._v(" "),e("h5",{attrs:{id:"defer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#defer"}},[t._v("#")]),t._v(" defer")]),t._v(" "),e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("defer")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("src")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("script.js"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),e("p",[t._v("具有 defer 属性的脚本在 HTML 解析完全完成之后执行，但在 DOMContentLoaded 事件之前执行。defer 保证脚本将按照它们在 HTML 中出现的顺序执行并且不会阻塞解析器。\n"),e("img",{attrs:{src:"https://web-dev.imgix.net/image/admin/Eq0mcvDALKibHe15HspN.png?auto=format&w=1600",alt:"defer"}}),t._v("\n对不太重要的资源使用 defer。例如，低于首屏的视频播放器。")]),t._v(" "),e("h4",{attrs:{id:"把样式表放在顶部-脚本放在body底部"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#把样式表放在顶部-脚本放在body底部"}},[t._v("#")]),t._v(" 把样式表放在顶部，脚本放在body底部")]),t._v(" "),e("p",[t._v("把css文件放到"),e("code",[t._v("<head>")]),t._v("标签内部前面，js放到"),e("code",[t._v("<body>")]),t._v("标签最后引入，这样就能尽量避免DOM的构建时长受到JS的影响。")]),t._v(" "),e("h4",{attrs:{id:"减少dom元素的数量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#减少dom元素的数量"}},[t._v("#")]),t._v(" 减少DOM元素的数量")]),t._v(" "),e("p",[t._v("一个复杂的页面意味着要下载更多的字节，而且用JavaScript访问DOM也会更慢。举个例子，想要添加一个事件处理器的时候，循环遍历页面上的500个DOM元素和5000个DOM元素是有区别的。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 计算页面全部的元素个数")]),t._v("\ndocument"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementsByTagName")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'*'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n")])])]),e("p",[t._v("当页面上存在大量DOM元素时，我们需要清理有些与内容无关的标签，以及用css修复布局问题而非使用div嵌套。")]),t._v(" "),e("h4",{attrs:{id:"尽量减少dom访问"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#尽量减少dom访问"}},[t._v("#")]),t._v(" 尽量减少DOM访问")]),t._v(" "),e("p",[t._v("用JavaScript访问DOM元素是很慢的，所以，为了让页面反应更迅速，应该：")]),t._v(" "),e("ul",[e("li",[t._v("缓存已访问过的元素的索引")]),t._v(" "),e("li",[t._v("先“离线”更新节点，再把它们添到DOM树上")]),t._v(" "),e("li",[t._v("避免用JavaScript修复布局问题")])]),t._v(" "),e("h4",{attrs:{id:"尽量少用iframe"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#尽量少用iframe"}},[t._v("#")]),t._v(" 尽量少用iframe")]),t._v(" "),e("p",[t._v("iframe的缺点：")]),t._v(" "),e("ul",[e("li",[t._v("代价高昂，即使是空白的iframe")]),t._v(" "),e("li",[t._v("阻塞页面加载\n我们应该尽量少用iframe。")])]),t._v(" "),e("h4",{attrs:{id:"事件委托"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件委托"}},[t._v("#")]),t._v(" 事件委托")]),t._v(" "),e("p",[t._v("有时候感觉页面反映不够灵敏，是因为有太多频繁执行的事件处理器被添加到了DOM树的不同元素上，这就是推荐使用事件委托的原因。")]),t._v(" "),e("p",[t._v("如果一个div里面有10个按钮，应该只给div容器添加一个事件处理器，而不是给每个按钮都添加一个。")]),t._v(" "),e("h4",{attrs:{id:"不要用html缩放图片"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#不要用html缩放图片"}},[t._v("#")]),t._v(" 不要用HTML缩放图片")]),t._v(" "),e("p",[t._v("不要因为在HTML中可以设置宽高而使用本不需要的大图。如果需要：")]),t._v(" "),e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("img")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("width")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("100"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("height")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("100"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("src")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("xxx.jpg"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("alt")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("xxx"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])])]),e("p",[t._v("那么图片本身（xxx.jpg）应该是 100"),e("em",[t._v("100px 的，而不是去缩小 500")]),t._v("500px 的图片。")]),t._v(" "),e("h2",{attrs:{id:"参考文档"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考文档"}},[t._v("#")]),t._v(" 参考文档")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://book.douban.com/subject/10746113/",target:"_blank",rel:"noopener noreferrer"}},[t._v("http权威指南"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"http://taligarsiel.com/Projects/howbrowserswork1.htm",target:"_blank",rel:"noopener noreferrer"}},[t._v("How browsers work"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://web.dev/howbrowserswork",target:"_blank",rel:"noopener noreferrer"}},[t._v("浏览器的工作原理：新式网络浏览器幕后揭秘"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://book.douban.com/subject/25910556/",target:"_blank",rel:"noopener noreferrer"}},[t._v("WebKit技术内幕"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"http://fex.baidu.com/blog/2014/05/what-happen/",target:"_blank",rel:"noopener noreferrer"}},[t._v("从输入 URL 到页面加载完成的过程中都发生了什么事情？"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://juejin.cn/post/7128400578467594248",target:"_blank",rel:"noopener noreferrer"}},[t._v("性能优化之 preload、prefetch、preconnect 的区别与使用"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://web.dev/efficiently-load-third-party-javascript",target:"_blank",rel:"noopener noreferrer"}},[t._v("高效加载第三方 JavaScript"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://web.dev/fast/",target:"_blank",rel:"noopener noreferrer"}},[t._v("快速加载"),e("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=r.exports}}]);