(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{524:function(r,e,a){"use strict";a.r(e);var t=a(65),o=Object(t.a)({},(function(){var r=this,e=r.$createElement,a=r._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[a("h1",{attrs:{id:"合成层优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合成层优化"}},[r._v("#")]),r._v(" 合成层优化")]),r._v(" "),a("p",[r._v("在"),a("RouterLink",{attrs:{to:"/blog/broswer/render-mechanism.html#_5-分层布局树-生成layer-tree"}},[r._v("浏览器渲染原理")]),r._v("一文中已经讲过，为了方便处理"),a("code",[r._v("Position")]),r._v("、"),a("code",[r._v("Clipping")]),r._v("、"),a("code",[r._v("Overflow-scroll")]),r._v("、"),a("code",[r._v("CSS Transfrom/Opacity/Animation/Filter")]),r._v("、"),a("code",[r._v("Mask or Reflection")]),r._v("、"),a("code",[r._v("Z-index")]),r._v("等属性，渲染引擎并不会直接使用Render树进行绘制，而是对渲染树进行分层，生成对应的图层树(Layer Tree)之后，在进行一系列的绘制操作。")],1),r._v(" "),a("h2",{attrs:{id:"概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[r._v("#")]),r._v(" 概念")]),r._v(" "),a("p",[a("img",{attrs:{src:"https://box.kancloud.cn/3acbfdd9c60d21cb151b93f26bb438e1_650x268.png",alt:"layerTree"}})]),r._v(" "),a("p",[r._v("在 Chrome 中"),a("code",[r._v("Layer Tree")]),r._v("有两种不同的层类型："),a("code",[r._v("RenderLayers 渲染层")]),r._v(" 和 "),a("code",[r._v("GraphicsLayers 图形层")]),r._v("。")]),r._v(" "),a("h3",{attrs:{id:"graphicslayers-图形层"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#graphicslayers-图形层"}},[r._v("#")]),r._v(" GraphicsLayers 图形层")]),r._v(" "),a("blockquote",[a("p",[r._v("每个合成层（Compositing layer）单独拥有一个 GraphicsLayers图形层。可以在 "),a("code",[r._v("Chrome控制台 -> More Tools -> Rendering -> Layer borders")]),r._v(" 中看到，黄色的就是图层信息。")])]),r._v(" "),a("p",[r._v("普通文档流内共用一个 "),a("code",[r._v("GraphicsLayers图形层")]),r._v("（这里称为默认合成层，里面不管添加多少元素，其实都是在同一个合成层中）；其次，absolute布局（fixed也一样），虽然可以脱离普通文档流，但它仍然属于默认合成层。")]),r._v(" "),a("p",[r._v("而每个 GraphicsLayer 都有一个 "),a("code",[r._v("GraphicsContext（图形上下文）")]),r._v("，GraphicsContext 负责输出该层的位图（GraphicsContext将"),a("code",[r._v("RGB图像")]),r._v("，"),a("code",[r._v("GMYK图像")]),r._v(" 或者 "),a("code",[r._v("黑白图像")]),r._v("绘制到一个位图对象中），位图是存储在共享内存中，作为纹理上传到 GPU 中，最后由 GPU 将多个位图进行合成，然后显示到屏幕上。")]),r._v(" "),a("p",[r._v("某些特殊的"),a("code",[r._v("RenderLayer")]),r._v("会生成单独的 合成层：")]),r._v(" "),a("ul",[a("li",[r._v("直接原因（direct reason）\n"),a("ul",[a("li",[a("gray",[r._v("硬件加速的 iframe 元素（比如 iframe 嵌入的页面中有合成层）")])],1),r._v(" "),a("li",[a("gray",[r._v("硬件加速的插件，比如 flash 等")])],1),r._v(" "),a("li",[a("gray",[r._v("使用加速视频解码的 video 元素")])],1),r._v(" "),a("li",[a("gray",[r._v("拥有 3D（WebGL）上下文或加速的 2D 上下文的 canvas 元素")])],1),r._v(" "),a("li",[a("gray",[r._v("3D 或透视变换(perspective transform) CSS 属性")])],1),r._v(" "),a("li",[a("gray",[r._v("在 DPI 较高的屏幕上，fix 定位的元素会自动地被提升到合成层中。但在 DPI 较低的设备上却并非如此，因为这个渲染层的提升会使得字体渲染方式由子像素变为灰阶")])],1),r._v(" "),a("li",[a("gray",[r._v("backface-visibility 为 hidden")])],1),r._v(" "),a("li",[a("gray",[r._v("对 opacity、transform、fliter、backdropfilter 应用了 animation 或 transition（需要是 active 的 animation 或者 transition，当 animation 或者 transition 效果未开始或结束后，提升合成层也会失效）")])],1),r._v(" "),a("li",[a("gray",[a("a",{attrs:{href:"https://caniuse.com/#search=will-change",target:"_blank",rel:"noopener noreferrer"}},[r._v("will-change"),a("OutboundLink")],1),r._v(" 设置为 opacity、transform、top、left、bottom、right（其中 top、left 等需要设置明确的定位属性，如 relative 等）")])],1)])]),r._v(" "),a("li",[r._v("后代元素原因\n"),a("ul",[a("li",[a("gray",[r._v("有合成层后代同时本身有 transform、opactiy（小于 1）、mask、fliter、reflection 属性")])],1),r._v(" "),a("li",[a("gray",[r._v("有合成层后代同时本身 overflow 不为 visible（如果本身是因为明确的定位因素产生的 SelfPaintingLayer，则需要 z-index 不为 auto）")])],1),r._v(" "),a("li",[a("gray",[r._v("有合成层后代同时本身 fixed 定位")])],1),r._v(" "),a("li",[a("gray",[r._v("有 3D transfrom 的合成层后代同时本身有 preserves-3d 属性")])],1),r._v(" "),a("li",[a("gray",[r._v("有 3D transfrom 的合成层后代同时本身有 perspective")])],1)])]),r._v(" "),a("li",[r._v("overlap 重叠原因\n"),a("ul",[a("li",[a("gray",[r._v("元素有一个兄弟元素在合成层渲染，并且该兄弟元素的 z-index 较小，那这个元素也会被应用到合成层")])],1)])])]),r._v(" "),a("p",[r._v("一旦一个元素提升为了合成层就会有自己的绘图上下文，可以独立于普通文档流中，改动后可以避免整个页面重绘，提升性能：")]),r._v(" "),a("ul",[a("li",[a("gray",[r._v("当需要 repaint 时，只需要 repaint 本身，不会影响到其他的层")])],1),r._v(" "),a("li",[a("gray",[r._v("对于 transform 和 opacity 效果，不会触发 layout 和 paint")])],1)]),r._v(" "),a("h2",{attrs:{id:"合成层提升方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合成层提升方案"}},[r._v("#")]),r._v(" 合成层提升方案")]),r._v(" "),a("h2",{attrs:{id:"合成层工作原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合成层工作原理"}},[r._v("#")]),r._v(" 合成层工作原理")]),r._v(" "),a("h3",{attrs:{id:"软件光栅化原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#软件光栅化原理"}},[r._v("#")]),r._v(" 软件光栅化原理")]),r._v(" "),a("h3",{attrs:{id:"硬件光栅化原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#硬件光栅化原理"}},[r._v("#")]),r._v(" 硬件光栅化原理")]),r._v(" "),a("h2",{attrs:{id:"devtools调试图层"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#devtools调试图层"}},[r._v("#")]),r._v(" devtools调试图层")]),r._v(" "),a("h2",{attrs:{id:"延伸阅读"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#延伸阅读"}},[r._v("#")]),r._v(" 延伸阅读")]),r._v(" "),a("p",[a("a",{attrs:{href:"https://fed.taobao.org/blog/taofed/do71ct/performance-composite/",target:"_blank",rel:"noopener noreferrer"}},[r._v("层压缩和层爆炸"),a("OutboundLink")],1),r._v("：由于重叠的原因，可能随随便便就会产生出大量合成层来，而每个合成层都要消耗 CPU 和内存资源，岂不是严重影响页面性能。这一点浏览器也考虑到了，因此就有了层压缩（Layer Squashing）的处理。如果多个渲染层同一个合成层重叠时，这些渲染层会被压缩到一个 GraphicsLayer 中，以防止由于重叠原因导致可能出现的“层爆炸”。")]),r._v(" "),a("h2",{attrs:{id:"参考文档"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文档"}},[r._v("#")]),r._v(" 参考文档")]),r._v(" "),a("p",[a("a",{attrs:{href:"https://www.chromium.org/developers/design-documents/gpu-accelerated-compositing-in-chrome",target:"_blank",rel:"noopener noreferrer"}},[r._v("GPU Accelerated Compositing in Chrome"),a("OutboundLink")],1)]),r._v(" "),a("p",[a("a",{attrs:{href:"https://fed.taobao.org/blog/taofed/do71ct/performance-composite",target:"_blank",rel:"noopener noreferrer"}},[r._v("无线性能优化：Composite"),a("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=o.exports}}]);