(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{465:function(t,a,s){t.exports=s.p+"assets/img/hardware-os-app.4bdb84a6.png"},466:function(t,a,s){t.exports=s.p+"assets/img/ipc.71ab06ac.png"},536:function(t,a,s){"use strict";s.r(a);var r=s(65),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"一文搞懂cpu、内存-外存、缓存、gpu、进程、线程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一文搞懂cpu、内存-外存、缓存、gpu、进程、线程"}},[t._v("#")]),t._v(" 一文搞懂CPU、内存/外存、缓存、GPU、进程、线程")]),t._v(" "),r("p",[r("em",[r("strong",[t._v("CPU 是计算机的大脑，它提供了一套指令集，我们写的程序最终会通过 CPU 指令来控制的计算机的运行")])]),t._v("。CPU 会对指令进行译码，然后通过逻辑电路执行该指令。整个执行的流程分为了多个阶段，叫做流水线。指令流水线包括取指令、译码、执行、取数、写回五步，这是一个指令周期。cpu 会不断的执行指令周期来完成各种任务。")]),t._v(" "),r("p",[t._v("指令和数据都会首先加载到内存中，在程序运行时依次取到 CPU 里。CPU 访问内存虽然比较快，但比起 CPU 执行速度来说还是比较慢的，为了缓解这种速度矛盾，cpu 设计了 3 级缓存，也就是 L1、L2、L3 的缓存。")]),t._v(" "),r("p",[t._v("有了这 3 级缓存以后，cpu 执行速度和访问内存速度的矛盾就可以得到缓解，不需要一直访问内存，cpu 每次会加载一个缓存行，也就是 64 字节大小的数据到缓存中。这样访问临近的数据的时候就可以直接访问缓存。\n从内存中把数据和指令加载到 cpu 的缓存中，然后通过控制器控制指令的译码、执行，通过运算器进行运算，之后把结果写回内存。这就是 cpu 的工作流程。\ncpu 每个核只有一个线程，也就是单控制流、单数据流。这样的架构导致 cpu 在一些场景下效率是不高的，比如 3d 渲染的场景。\n现在的计算机硬件最核心的结构分为三层：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("CPU ====>> 内存 ====>> 硬盘\n")])])]),r("p",[t._v("所有命令的执行都遵循："),r("em",[r("strong",[t._v("硬盘中读取内容到内存，内存将数据传输入给CPU处理，CPU将处理结果返回内存，内存再将处理后的数据输入给硬盘，由硬盘进行存储")])]),t._v("。")]),t._v(" "),r("h2",{attrs:{id:"计算机三层结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#计算机三层结构"}},[t._v("#")]),t._v(" 计算机三层结构")]),t._v(" "),r("div",{staticClass:"custom-block tip"},[r("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),r("p",[t._v("计算机分为硬件和软件；而软件可以分为应用软件和控制软件（即操作系统）。")])]),t._v(" "),r("p",[r("img",{attrs:{src:s(465),alt:"计算机三层结构"}}),t._v(" "),r("em",[r("strong",[t._v("应用程序是通过操作系统来间接地操作硬件的")])]),t._v("。我们的浏览器属于应用程序，比如我们点击打开浏览器，从计算机逻辑上看，是将打开软件的指令传给操作系统，操作系统将指令传给计算机硬件，计算机硬件进行处理操作，将结果返回给操作系统，操作系统将结果传给输出设备，输出设备输出结果。")]),t._v(" "),r("h2",{attrs:{id:"内存、外存"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#内存、外存"}},[t._v("#")]),t._v(" 内存、外存")]),t._v(" "),r("p",[t._v("内存（Memory）：指的是内存存储器，又称为主存，是CPU用来直接寻址和存储的空间。通俗的说，当打开一个软件时，需要一定的空间让软件运行，这个空间就是内存。它是硬盘、主板、显卡等硬件上的数据与处理器之间进行数据交换处理的桥梁（计算机中所有程序的运算都是在内存中进行的），我们可以把内存看作数据缓存区，一个高速的缓存区。")]),t._v(" "),r("p",[t._v("外存：是相对于内存而言的，包括硬盘（磁盘）、软盘等外存储器。我们要用的软件/程序数据都安装存放在外存上，但是当我们运行他们时，就需要把这些软件的数据调入内存，才能运行顺畅，因为CPU和内存间的数据交换速度远高于和外存交换速度。")]),t._v(" "),r("h2",{attrs:{id:"cpu-central-processing-unit-中央处理器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cpu-central-processing-unit-中央处理器"}},[t._v("#")]),t._v(" CPU (Central Processing Unit，中央处理器)")]),t._v(" "),r("div",{staticClass:"custom-block tip"},[r("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),r("p",[t._v("CPU 是计算机的大脑，它提供了一套庞大而广泛的指令集，可以管理计算机的每个输入和输出，我们写的程序最终会通过 CPU 指令来控制的计算机的运行。")])]),t._v(" "),r("h3",{attrs:{id:"工作原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#工作原理"}},[t._v("#")]),t._v(" 工作原理")]),t._v(" "),r("p",[t._v("CPU 在接到程序下发的指令之后，会对指令进行译码，然后通过逻辑电路执行该指令，执行指令的过程中会向计算机各个部位发送指令，统筹协调各个部位的运转，共同完成下达的任务。")]),t._v(" "),r("p",[t._v("指令和数据都会首先加载到内存中，在程序运行时从内存中依次把数据和指令加载到 CPU 的缓存中，然后通过控制器控制指令的译码、执行，通过运算器进行运算，之后把结果写回内存。这就是 CPU 的工作流程。")]),t._v(" "),r("p",[t._v("整个执行的流程分为了多个阶段，叫做流水线。指令流水线包括取指令、译码、执行、取数、写回五步，这是一个指令周期。CPU 会不断的执行指令周期来完成各种任务。")]),t._v(" "),r("h3",{attrs:{id:"cpu多级缓存"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cpu多级缓存"}},[t._v("#")]),t._v(" CPU多级缓存")]),t._v(" "),r("p",[t._v("缓存只是内存中少部分数据的复制品，所以CPU到缓存中寻找数据时，也会出现找不到的情况（因为这些数据没有从内存复制到缓存中去），这时CPU还是会到内存中去找数据，这样系统的速度就慢下来了，不过CPU会把这些数据复制到缓存中去，以便下一次不要再到内存中去取（缓存中的数据会经常按照一定的算法来更换，这样才能保证缓存中的数据是被访问最频繁的）。")]),t._v(" "),r("ul",[r("li",[t._v("***CPU一级缓存（L1 Cache）***：就是指CPU的第一层级的高速缓存，主要当担的工作是缓存指令和缓存数据。一级缓存的容量与结构对CPU性能影响十分大，但是由于它的结构比较复杂，又考虑到成本等因素，一般来说，CPU的一级缓存较小，通常CPU的一级缓存也就能做到256KB左右的水平。")]),t._v(" "),r("li",[t._v("***CPU二级缓存（L2 Cache）***：就是指CPU的第二层级的高速缓存，而二级缓存的容量会直接影响到CPU的性能，二级缓存的容量越大越好。例如intel的第八代i7-8700处理器，共有六个核心数量，而每个核心都拥有256KB的二级缓存，属于各核心独享，这样二级缓存总数就达到了1.5MB。")]),t._v(" "),r("li",[t._v("***CPU三级缓存（L3 Cache）***：就是指CPU的第三层级的高速缓存，其作用是进一步降低内存的延迟，同时提升海量数据量计算时的性能。和一级缓存、二级缓存不同的是，三级缓存是核心共享的，能够将容量做的很大。")])]),t._v(" "),r("h2",{attrs:{id:"gpu-graphics-processing-unit-图形处理器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#gpu-graphics-processing-unit-图形处理器"}},[t._v("#")]),t._v(" GPU（Graphics Processing Unit，图形处理器）")]),t._v(" "),r("blockquote",[r("p",[t._v("CPU 设计之初便是为了旨在快速处理各种任务（以 CPU 时钟速度衡量）。由于 CPU 是串行运算的，这样的架构导致 CPU 在一些场景下效率是不高的，比如 3d 渲染的场景。")])]),t._v(" "),r("p",[t._v("与 CPU 不同，"),r("em",[r("strong",[t._v("GPU 是基于大的吞吐量设计的，指令集非常少，擅长的是大规模并发计算")])]),t._v("，最初是为解决图形处理问题而研发的，为了快速渲染高分辨率图像和视频，这就是为什么在图形环境中“使用 GPU” 或 “GPU 支持”都与快速渲染和顺滑交互有关。")]),t._v(" "),r("p",[t._v("由于GPU 设计有数千个同时运行的处理器内核，可实现大规模并行性。因此它们也常用于机器学习、金融模拟和、风险建模以及许多其他类型的科学计算等非图形任务（GPU常被用于挖掘比特币或以太坊等加密货币）。")]),t._v(" "),r("h2",{attrs:{id:"进程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#进程"}},[t._v("#")]),t._v(" 进程")]),t._v(" "),r("p",[r("code",[t._v("进程（process）")]),t._v("是CPU资源分配的最小单位。")]),t._v(" "),r("p",[r("img",{attrs:{src:s(466),alt:"IPC通信"}})]),t._v(" "),r("ul",[r("li",[t._v("进程有自己的独立空间地址，每启动一个进程，系统CPU就会为它分配内存空间，建立数据表来维护代码段、堆栈段和数据段，这种操作非常昂贵")]),t._v(" "),r("li",[t._v("在应用程序中，有时为了更好的满足功能的需要，启动的进程会创建另外的新的进程来处理其他任务，这些创建出来的新的进程拥有全新的独立的内存空间，不能与原来的进程共享内存，而进程之间的通信需要以"),r("a",{attrs:{href:"https://en.wikipedia.org/wiki/Inter-process_communication",target:"_blank",rel:"noopener noreferrer"}},[t._v("IPC"),r("OutboundLink")],1),t._v("通信的方式来进行。")]),t._v(" "),r("li",[t._v("多进程程序更健壮，很多应用程序都会采取这种多进程的方式来工作，某个进程挂掉了（多线程程序中只要有一个线程挂掉，整个进程便挂掉了），并不会对其他进程产生影响，因为进程有自己的独立的地址空间。")])]),t._v(" "),r("h2",{attrs:{id:"线程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#线程"}},[t._v("#")]),t._v(" 线程")]),t._v(" "),r("p",[r("code",[t._v("线程（thread）")]),t._v("是程序执行的最小单位（CPU调度和分派的基本单位）。")]),t._v(" "),r("ul",[r("li",[t._v("线程是跑在进程里面的，一个进程里面可能有一个或者多个线程，而一个线程，只能隶属于一个进程。当我们的进程得到了内存之后，就可以使用线程进行资源调度，进而完成我们应用程序的功能")]),t._v(" "),r("li",[t._v("线程之间使用相同的地址空间，共享进程中的全局变量，静态变量等数据，通信更方便；CPU切换线程的代价比切换进程要小很多，同时创建一个线程的开销也比创建进程小很多。")])]),t._v(" "),r("h2",{attrs:{id:"参考文档"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考文档"}},[t._v("#")]),t._v(" 参考文档")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://juejin.cn/post/7001634685927292936",target:"_blank",rel:"noopener noreferrer"}},[t._v("这一次，彻底搞懂 GPU 和 css 硬件加速"),r("OutboundLink")],1),t._v(" "),r("a",{attrs:{href:"https://www.cnblogs.com/biglucky/p/4223565.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("CPU和GPU的设计区别"),r("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=e.exports}}]);