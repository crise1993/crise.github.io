(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{500:function(v,_,e){v.exports=e.p+"assets/img/cicd.938e751f.png"},577:function(v,_,e){"use strict";e.r(_);var t=e(65),o=Object(t.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"项目ci-cd持续集成部署方案-看这一篇就够了"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#项目ci-cd持续集成部署方案-看这一篇就够了"}},[v._v("#")]),v._v(" 项目CI/CD持续集成部署方案，看这一篇就够了")]),v._v(" "),t("h2",{attrs:{id:"概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[v._v("#")]),v._v(" 概念")]),v._v(" "),t("ul",[t("li",[t("code",[v._v("CI（Continuous Integration）")])])]),v._v(" "),t("p",[v._v("指的是"),t("code",[v._v("持续集成")]),v._v("，即项目代码的新更改会定期构建、测试并合并到代码仓库中，有效解决一次开发多个项目分支导致代码冲突问题。")]),v._v(" "),t("ul",[t("li",[t("code",[v._v("CD（Continuous Delivery/Continuous Deployment）")])])]),v._v(" "),t("p",[v._v("指的是"),t("code",[v._v("持续交付/持续部署")]),v._v("，即项目代码的新更改可以自动或手动合并到主分支，并在合并至主分支后自动执行构建、测试流程，检测新更改是否对主分支代码产生影响。构建测试通过后，会自动发布并部署至生产环境，有效减轻运维团队负担。")]),v._v(" "),t("h2",{attrs:{id:"导语"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#导语"}},[v._v("#")]),v._v(" 导语")]),v._v(" "),t("p",[v._v("一个网站的开发上线往往都需要以下几个步骤：")]),v._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[v._v("TIP")]),v._v(" "),t("p",[v._v("编写代码 -> （单元测试/集成测试） -> 上传至代码仓库 -> 打包构建 -> 上传至服务器 -> 配置 Nginx/Apache 将 80 端口映射至网站文件夹")])]),v._v(" "),t("p",[v._v("现代软件开发的需求加上部署到不同基础设施的复杂性使得创建应用程序成为一个繁琐的过程。当应用程序出现规模性增长，开发团队人员变得更分散时，快速且不断地生产和发布软件的流程将会变得更加困难。")]),v._v(" "),t("p",[v._v("为了解决这些问题，开发团队开始探索新的策略来使他们的"),t("code",[v._v("构建")]),v._v("、"),t("code",[v._v("测试")]),v._v("和"),t("code",[v._v("发布")]),v._v("流程自动化，以帮助其更快地部署新的生产。这就是"),t("code",[v._v("持续集成")]),v._v("和"),t("code",[v._v("持续交付/部署")]),v._v("发展的由来。")]),v._v(" "),t("p",[t("img",{attrs:{src:e(500),alt:"ci/cd"}})]),v._v(" "),t("p",[v._v("当我们有了 "),t("code",[v._v("CI/CD")]),v._v(" 的系统之后，我们就只需要编写代码，剩下的步骤都交给 "),t("code",[v._v("CI/CD")]),v._v(" 系统来处理，这极大地解放了我们的双手，提升了开发效率。")]),v._v(" "),t("p",[t("code",[v._v("jenkins")]),v._v("、"),t("code",[v._v("Travis CI")]),v._v("、"),t("code",[v._v("Drone CI")]),v._v("、"),t("code",[v._v("Gitlab CI/CD")]),v._v("等持续部署工具都可以很好的实现这一需求。本文通过实践（以部署到"),t("code",[v._v("CenteOS")]),v._v("服务器为样板），致力于比较不同方案的优劣。")]),v._v(" "),t("h2",{attrs:{id:"jenkins持续集成部署"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jenkins持续集成部署"}},[v._v("#")]),v._v(" jenkins持续集成部署")]),v._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[v._v("TIP")]),v._v(" "),t("p",[t("a",{attrs:{href:"https://www.jenkins.io/doc/book/installing/linux/",target:"_blank",rel:"noopener noreferrer"}},[v._v("Jenkins"),t("OutboundLink")],1),v._v(" 是开源 CI&CD 软件领导者，提供超过 1000 个插件来支持构建、部署、自动化，满足任何项目的需要。")])]),v._v(" "),t("ul",[t("li",[t("p",[v._v("优点：")]),v._v(" "),t("ol",[t("li",[v._v("编译服务和代码仓库分离，耦合度低")]),v._v(" "),t("li",[v._v("生态丰富，插件众多，支持语言众多，各种配置文档比较全")]),v._v(" "),t("li",[v._v("可视化流程，支持多语言项目构建，有统一的web管理界面")]),v._v(" "),t("li",[v._v("完全兼容"),t("code",[v._v("ant")]),v._v("、"),t("code",[v._v("maven")]),v._v("、"),t("code",[v._v("gradle")]),v._v("等多种第三方构建工具")]),v._v(" "),t("li",[v._v("同时跟"),t("code",[v._v("svn")]),v._v("、"),t("code",[v._v("git")]),v._v("能无缝集成，也支持直接与知名源代码托管网站，比如："),t("code",[v._v("GitHub")]),v._v("、"),t("code",[v._v("bitbucker")]),v._v("直接集成")])])]),v._v(" "),t("li",[t("p",[v._v("缺点：")]),v._v(" "),t("ol",[t("li",[v._v("插件以及是自身安装较为复杂")]),v._v(" "),t("li",[v._v("依赖于"),t("code",[v._v("Java")]),v._v("，内存占用比较大，体量较大，不是很适合小型团队")]),v._v(" "),t("li",[v._v("使用"),t("code",[v._v("webhook")]),v._v("插件，里面配置的"),t("code",[v._v("git仓库")]),v._v("地址不能是"),t("code",[v._v("127.0.0.1")]),v._v("，必须得有仓库服务器（得基于gitlab搭建自身的仓库服务器）")])])])]),v._v(" "),t("p",[v._v("jenkins具体配置教程可以参考这篇文章"),t("a",{attrs:{href:"https://juejin.cn/post/6896151951545729031",target:"_blank",rel:"noopener noreferrer"}},[v._v("写给前端的 Jenkins 教程——10分钟实现前端/ Node.js 项目的 CI/CD"),t("OutboundLink")],1),v._v("。")]),v._v(" "),t("p",[v._v("通过"),t("code",[v._v("Jenkins")]),v._v("和"),t("code",[v._v("gitlab")]),v._v("仓库打通，配置"),t("code",[v._v("gitlab")]),v._v("仓库的"),t("code",[v._v("hooks")]),v._v("后，当我们的仓库代码push到指定的分支后,自动触发Jenkins任务，"),t("code",[v._v("Jenkins")]),v._v("会自动将最新代码pull到centos中,接下来我们需要在代码中执行"),t("code",[v._v("npm install")]),v._v("安装所以依赖,然后再对项目进行"),t("code",[v._v("npm build")]),v._v("打包，并更新到Nginx指定的目录中，重启Nginx服务，就实现了项目的持续部署。")]),v._v(" "),t("h2",{attrs:{id:"drone-ci实现自动集成部署"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#drone-ci实现自动集成部署"}},[v._v("#")]),v._v(" drone CI实现自动集成部署")]),v._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[v._v("TIP")]),v._v(" "),t("p",[t("a",{attrs:{href:"https://docs.drone.io",target:"_blank",rel:"noopener noreferrer"}},[v._v("drone"),t("OutboundLink")],1),v._v("是一个现代化的持续集成平台，使用强大的云原生管道引擎自动化构建、测试和发布工作流程，\n它可以使用简单的"),t("code",[v._v("YAML配置文件")]),v._v("来定义和执行"),t("code",[v._v("Docker")]),v._v("容器中的"),t("code",[v._v("Pipelines")]),v._v("，与流行的源代码管理系统无缝集成")])]),v._v(" "),t("ul",[t("li",[v._v("优点：\n"),t("ol",[t("li",[v._v("配置较简单，只需要配置"),t("code",[v._v("drone.yml")]),v._v("文件")])])]),v._v(" "),t("li",[v._v("缺点：\n"),t("ol",[t("li",[v._v("安装比较复杂，得配合docker进行安装")]),v._v(" "),t("li",[t("code",[v._v("Drone")]),v._v("的文档更新不及时，文档有的地方是有问题的")]),v._v(" "),t("li",[v._v("可视化界面得基于"),t("code",[v._v("Drone api")]),v._v("进行二次封装，学习成本较高")])])])]),v._v(" "),t("p",[v._v("drone ci具体配置教程可以参考这篇文章"),t("a",{attrs:{href:"https://juejin.cn/post/7073380337766072350",target:"_blank",rel:"noopener noreferrer"}},[v._v("使用drone ci自动化部署静态博客"),t("OutboundLink")],1),v._v("，\ndrone的文档更新不及时，文档有的地方还是有问题的，具体配置坑比较多。")]),v._v(" "),t("h2",{attrs:{id:"gitlab-ci-cd实现-推荐"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gitlab-ci-cd实现-推荐"}},[v._v("#")]),v._v(" Gitlab CI/CD实现（推荐）")]),v._v(" "),t("p",[t("code",[v._v("Gitlab CI")]),v._v("是"),t("code",[v._v("gitlab8.0")]),v._v("之后自带的一个持续集成系统，中心思想是当每一次"),t("code",[v._v("push")]),v._v("到"),t("code",[v._v("gitlab")]),v._v("的时候，都会触发一次脚本执行，然后脚本内容包括了测试、编译、部署等一系列自定义内容。")]),v._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[v._v("TIP")]),v._v(" "),t("p",[t("code",[v._v("Gitlab CI")]),v._v("的脚本执行，需要自定义安装对应"),t("code",[v._v("Gitlab Runner")]),v._v("来执行，代码"),t("code",[v._v("push")]),v._v("之后，"),t("code",[v._v("webhook")]),v._v("检测到代码变化，就会触发"),t("code",[v._v("gitlab CI")]),v._v("，分配到各个"),t("code",[v._v("runner")]),v._v("实例来运行相应的脚本"),t("code",[v._v("script")]),v._v("。这些脚本有的是测试项目用的，有的是部署用的。")]),v._v(" "),t("p",[t("code",[v._v("GitLab Runner")]),v._v("是配合"),t("code",[v._v("GitLab CI/CD")]),v._v("完成工作的核心程序，出于性能考虑，"),t("code",[v._v("GitLab Runner")]),v._v("应该与"),t("code",[v._v("Gitlab")]),v._v("部署在不同的服务器上（"),t("code",[v._v("Gitlab")]),v._v("在单独的仓库服务器上，"),t("code",[v._v("GitLab Runner")]),v._v("部署在web应用的服务器上）。"),t("code",[v._v("GitLab Runner")]),v._v("在与"),t("code",[v._v("GitLab")]),v._v("关联后，可以在服务器上完成诸如项目拉取、文件打包、资源复制等各种命令操作。")])]),v._v(" "),t("ul",[t("li",[v._v("优点：\n"),t("ol",[t("li",[v._v("轻量级，不需要复杂的安装手段")]),v._v(" "),t("li",[v._v("配置简单，使用"),t("code",[v._v("YAML")]),v._v("进行配置，与gitlab可直接适配，任何人都可以很方便的使用")]),v._v(" "),t("li",[t("code",[v._v("Gitlab")]),v._v("与其"),t("code",[v._v("CI平台")]),v._v("紧密集成，可以方便查看每个打开或关闭拉取请求的运行和完成管道")]),v._v(" "),t("li",[t("code",[v._v("GitLab")]),v._v("与"),t("code",[v._v("GitLab CI")]),v._v("的深度整合，权限可以统一管理")]),v._v(" "),t("li",[t("code",[v._v("GitLab CI")]),v._v(" 是Git存储库管理器"),t("code",[v._v("GitLab")]),v._v("的固定组件，因此"),t("code",[v._v("CI/CD")]),v._v("流程实时构建日志十分清晰，UI交互体验很好")]),v._v(" "),t("li",[v._v("天然支持分布式，"),t("code",[v._v("gitlab")]),v._v("的"),t("code",[v._v("runner")]),v._v("可以装在任何一台电脑上，方便测试和集成")])])]),v._v(" "),t("li",[v._v("缺点：\n"),t("ol",[t("li",[v._v("没有统一的管理界面，无法统筹管理所有项目")]),v._v(" "),t("li",[v._v("配置依赖于代码仓库，耦合度没有"),t("code",[v._v("Jenkins")]),v._v("低")]),v._v(" "),t("li",[v._v("没有定时构建功能，尽管无法做到这一点，其实如果配置了提交代码既触发流水线，那么最后一次提交的构建在什么时候没有什么不同，反而减少未提交代码的定时构建资源浪费")])])])]),v._v(" "),t("p",[v._v("Gitlab CI/CD具体配置教程可以参考这篇文章"),t("a",{attrs:{href:"https://juejin.cn/post/7037022688493338661",target:"_blank",rel:"noopener noreferrer"}},[v._v("前端自动化部署：借助Gitlab CI/CD实现"),t("OutboundLink")],1),v._v("。")]),v._v(" "),t("p",[v._v("安装"),t("code",[v._v("gitlab-runner")]),v._v("前，请检查"),t("code",[v._v("web服务器")]),v._v("是否安装了"),t("code",[v._v("git")]),v._v(","),t("code",[v._v("Node")]),v._v(",以及项目中的npm包管理工具"),t("code",[v._v("yarn")]),v._v("或者"),t("code",[v._v("pnpm")]),v._v("。")]),v._v(" "),t("p",[v._v("1、"),t("a",{attrs:{href:"https://docs.gitlab.com/runner/install/linux-manually.html",target:"_blank",rel:"noopener noreferrer"}},[v._v("runner 安装"),t("OutboundLink")],1)]),v._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[v._v("TIP")]),v._v(" "),t("p",[v._v("如果不清楚应该下载哪个，可以使用"),t("code",[v._v("uname -a")]),v._v("查看当前web服务器版本，下载完成之后，可以通过"),t("code",[v._v("gitlab-runner --version")]),v._v("查看当前"),t("code",[v._v("gitlab-runner")]),v._v("安装版本。")])]),v._v(" "),t("p",[v._v("2、"),t("a",{attrs:{href:"https://docs.gitlab.com/runner/register/index.html",target:"_blank",rel:"noopener noreferrer"}},[v._v("runner 注册"),t("OutboundLink")],1)]),v._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[v._v("TIP")]),v._v(" "),t("p",[v._v("记得需要关闭"),t("code",[v._v("settings -> CI/CD -> Runners -> Shared runners")]),v._v("中的"),t("code",[v._v("Enable shared runners for this project")]),v._v("选项，因为如果需要使用"),t("code",[v._v("Shared runners")]),v._v("实例的话，必须得自己有自己的"),t("code",[v._v("gitlab")]),v._v("服务器，或者实名注册"),t("code",[v._v("gitlab")]),v._v("仓库，并且绑定银行卡。")])]),v._v(" "),t("p",[v._v("注册完成后，使用"),t("code",[v._v("gitlab-runner verify")]),v._v("查看当前runner实例是否激活，或者进"),t("code",[v._v("gitlab")]),v._v("项目仓库，"),t("code",[v._v("settings -> CI/CD -> Runners -> Available specific runners")]),v._v("，如果实例前面图片为"),t("code",[v._v("绿色圈圈")]),v._v("，代表"),t("code",[v._v("激活成功")]),v._v("，如果为"),t("code",[v._v("三角形内感叹号")]),v._v("，代表配置出了问题，这时候得检查下运行命令或者填写参数是否正确。如果配置不成功的话，后面运行pipeline会报各种各样的错误。")]),v._v(" "),t("p",[v._v("3、"),t("a",{attrs:{href:"https://docs.gitlab.com/ee/ci/yaml/index.html",target:"_blank",rel:"noopener noreferrer"}},[v._v("配置.gitlab-ci.yml"),t("OutboundLink")],1)]),v._v(" "),t("p",[v._v("当然也可以结合"),t("a",{attrs:{href:"https://docs.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[v._v("docker"),t("OutboundLink")],1),v._v("更好的实现项目的打包部署。")]),v._v(" "),t("h2",{attrs:{id:"结语"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#结语"}},[v._v("#")]),v._v(" 结语")]),v._v(" "),t("p",[t("code",[v._v("GitLab CI")]),v._v("有助于"),t("code",[v._v("DevOps")]),v._v("人员，例如敏捷开发中，开发和运维是同一个人，最便捷的开发方式。")]),v._v(" "),t("p",[t("code",[v._v("Jenkins CI")]),v._v("适合在多角色团队，职责分明、配置和代码分离、插件丰富。")]),v._v(" "),t("p",[v._v("在使用过两者后，个人认为"),t("code",[v._v("GitLab CI")]),v._v("更简单易用，如果有"),t("code",[v._v("Gitlab CI")]),v._v("达不到的要求，可以考虑使用jenkins。")]),v._v(" "),t("h2",{attrs:{id:"参考文档"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考文档"}},[v._v("#")]),v._v(" 参考文档")]),v._v(" "),t("p",[t("a",{attrs:{href:"https://juejin.cn/post/6997560212924137485",target:"_blank",rel:"noopener noreferrer"}},[v._v("centos+jenkins+nginx+gitlab前端自动化部署全记录"),t("OutboundLink")],1)]),v._v(" "),t("p",[t("a",{attrs:{href:"https://juejin.cn/post/6844903957391736840",target:"_blank",rel:"noopener noreferrer"}},[v._v("DroneCI+Github入坑指北"),t("OutboundLink")],1)]),v._v(" "),t("p",[t("a",{attrs:{href:"https://juejin.cn/post/6967972435064782879",target:"_blank",rel:"noopener noreferrer"}},[v._v("GitLab+Docker快速搭建CI/CD自动化部署"),t("OutboundLink")],1)]),v._v(" "),t("p",[t("a",{attrs:{href:"https://www.cnblogs.com/cnundefined/p/7095368.html",target:"_blank",rel:"noopener noreferrer"}},[v._v("GitLab-CI与GitLab-Runner"),t("OutboundLink")],1)])])}),[],!1,null,null,null);_.default=o.exports}}]);