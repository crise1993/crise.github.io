(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{557:function(t,s,e){"use strict";e.r(s);var n=e(65),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"eslint使用、原理及配置规则详解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#eslint使用、原理及配置规则详解"}},[t._v("#")]),t._v(" ESLint使用、原理及配置规则详解")]),t._v(" "),e("h2",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[t._v("在团队协作中，为避免低级 Bug、产出风格统一的代码，会预先制定编码规范。使用"),e("strong",[t._v("Lint静态代码检查工具")]),t._v("和"),e("strong",[t._v("代码风格检测工具")]),t._v("，则可以辅助编码规范落地，提升代码质量和可维护性。")])]),t._v(" "),e("p",[t._v("本文从ESLint、JSHint、JSLint对比出发，详细介绍eslint优势及使用方式，最后针对eslint规则配置文件，详细介绍各个eslint配置项的作用，以及为什么这样设置。希望看完能让你对eslint有较为全面的了解，能让你在配置过程中少走些弯路。")]),t._v(" "),e("h2",{attrs:{id:"eslint、jshint、jslint对比"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#eslint、jshint、jslint对比"}},[t._v("#")]),t._v(" ESLint、JSHint、JSLint对比")]),t._v(" "),e("p",[t._v("JSHint 和 JSLint 也是静态代码检查工具，但伴随着发展，他们已经无法满足需求，于是ESlint 诞生了，因次ESlint比它们功能更强大也更灵活。")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("JSLint")]),t._v("：无需配置，直接使用，因为配置是定好的。缺点是有限的配置选项，很多规则不能禁用，规范严格，扩展性差，无法根据错误定位到对应的规则。")]),t._v(" "),e("li",[e("strong",[t._v("JSHint")]),t._v("：是基于"),e("code",[t._v("JSLint")]),t._v("开发的，有了很多参数可以配置，支持配置文件，方便使用，支持了一些常用类库，支持了基本的ES6，但缺点却继承了jslint的一部分：不支持自定义规则、无法根据错误定位到对应的规则。并且不支持JSX（ReactJS的开发语言）语法。")]),t._v(" "),e("li",[e("strong",[t._v("ESLint")]),t._v("：默认规则里面包含了"),e("code",[t._v("JSLint")]),t._v("和"),e("code",[t._v("JSHint")]),t._v("的规则，易于迁移，这一点分明就是在抢jslint、jshint的用户；可配置为警告和错误两个等级，或者直接禁用掉，支持插件扩展，可以自定义规则，可以根据错误定位到对应的规则，支持ES6，唯一一个支持JSX的工具，缺点是需要进行一些自定义配置，执行速度上不如jslint和jshint。")])]),t._v(" "),e("h2",{attrs:{id:"eslint介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#eslint介绍"}},[t._v("#")]),t._v(" ESLint介绍")]),t._v(" "),e("p",[t._v("ESLint 由 "),e("a",{attrs:{href:"https://book.douban.com/subject/35175321/",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript红宝书"),e("OutboundLink")],1),t._v(" 作者 "),e("code",[t._v("Nicholas C. Zakas")]),t._v(" 编写， 2013年发布第一个版本。 NCZ 的初衷不是重复造一个轮子，而是在实际需求得不到 "),e("code",[t._v("JSHint")]),t._v(" 团队响应的情况下做出的选择："),e("strong",[t._v("以可扩展、每条规则独立、不内置编码风格为理念编写一个 lint 工具")]),t._v("。")]),t._v(" "),e("h3",{attrs:{id:"特点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[t._v("#")]),t._v(" 特点")]),t._v(" "),e("ul",[e("li",[t._v("默认规则包含所有 "),e("code",[t._v("JSLint")]),t._v("、"),e("code",[t._v("JSHint")]),t._v(" 中存在的规则，易迁移；")]),t._v(" "),e("li",[t._v("规则可配置性高：可设置「警告」、「错误」两个 error 等级，或者直接禁用；")]),t._v(" "),e("li",[t._v("包含代码风格检测的规则（可以丢掉 JSCS 了）")]),t._v(" "),e("li",[t._v("ESLint完全可插入式的，每一个规则是一个插件，支持插件扩展、自定义规则")])]),t._v(" "),e("h3",{attrs:{id:"支持能力"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#支持能力"}},[t._v("#")]),t._v(" 支持能力")]),t._v(" "),e("ul",[e("li",[t._v("ES6、TS")]),t._v(" "),e("li",[t._v("AngularJS、Vue、React")]),t._v(" "),e("li",[t._v("支持JSX、TSX类型文件")]),t._v(" "),e("li",[t._v("Style样式检查")]),t._v(" "),e("li",[t._v("自定义错误和提示")])]),t._v(" "),e("h3",{attrs:{id:"校验能力"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#校验能力"}},[t._v("#")]),t._v(" 校验能力")]),t._v(" "),e("ul",[e("li",[t._v("语法错误校验")]),t._v(" "),e("li",[t._v("不重要或丢失的标点符号，如分号")]),t._v(" "),e("li",[t._v("漏掉的结束符，如}")]),t._v(" "),e("li",[t._v("变量命名检查")]),t._v(" "),e("li",[t._v("未引用参数提示")]),t._v(" "),e("li",[t._v("无法运行到的代码块（使用过WebStorm的童鞋应该了解）")]),t._v(" "),e("li",[t._v("确保样式的统一规则，如sass或者less")])]),t._v(" "),e("h3",{attrs:{id:"使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[t._v("#")]),t._v(" 使用")]),t._v(" "),e("p",[t._v("ESLint使用教程可以参见"),e("a",{attrs:{href:"http://eslint.org/docs/user-guide/configuring",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方文档"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"配置方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置方式"}},[t._v("#")]),t._v(" 配置方式")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[t._v("具体配置写法详见"),e("a",{attrs:{href:"http://eslint.cn/docs/user-guide/configuring#using-configuration-files",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方文档"),e("OutboundLink")],1),t._v("。")])]),t._v(" "),e("p",[t._v("可以通过以下三种方式配置 ESLint:")]),t._v(" "),e("ul",[e("li",[t._v("使用 "),e("code",[t._v("JavaScript注释")]),t._v("的方式直接在代码源文件中嵌入配置信息")]),t._v(" "),e("li",[t._v("使用 .eslintrc.* 文件（支持"),e("code",[t._v("js")]),t._v("、"),e("code",[t._v("json")]),t._v("、"),e("code",[t._v("yaml/yml")]),t._v("三种文件后缀类型来指定配置信息）")]),t._v(" "),e("li",[t._v("在 package.json 中添加 "),e("code",[t._v("eslintConfig")]),t._v(" 配置块")])]),t._v(" "),e("p",[t._v("如果同一个目录下有多个配置文件，ESLint 只会使用一个。优先级顺序如下：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v(".eslintrc.js")])]),t._v(" "),e("li",[e("code",[t._v(".eslintrc.yaml")])]),t._v(" "),e("li",[e("code",[t._v(".eslintrc.yml")])]),t._v(" "),e("li",[e("code",[t._v(".eslintrc.json")])]),t._v(" "),e("li",[e("code",[t._v(".eslintrc")])]),t._v(" "),e("li",[e("code",[t._v("package.json")])])]),t._v(" "),e("h3",{attrs:{id:"文件忽略"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#文件忽略"}},[t._v("#")]),t._v(" 文件忽略")]),t._v(" "),e("p",[t._v("可以通过以下三种方式配置ESLint文件忽略：")]),t._v(" "),e("ul",[e("li",[t._v("通过当前工作目录下 「.eslintignore」 文件进行设置，使用的是Glob路径书写方式，与「.gitignore」的使用方法相同")]),t._v(" "),e("li",[t._v("在 package.json 中通过 "),e("code",[t._v("eslintIgnore")]),t._v(" 参数进行设置")])]),t._v(" "),e("h3",{attrs:{id:"文件内局部添加忽略"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#文件内局部添加忽略"}},[t._v("#")]),t._v(" 文件内局部添加忽略")]),t._v(" "),e("p",[t._v("eslint可以具体文件中设置特定代码的规则，常用于跳过某条语句的检测")]),t._v(" "),e("ul",[e("li",[t._v("注销全部规则，在代码前新建一行，添加注销 "),e("code",[t._v("/* eslint-disable */")]),t._v("。如果没有恢复设置的语句，则下列全部代码都会跳过检测。")]),t._v(" "),e("li",[t._v("恢复eslint，在代码前新建一行，添加注销 "),e("code",[t._v("/* eslint-enable */")])]),t._v(" "),e("li",[t._v("指定忽略的规则，"),e("code",[t._v("/* eslint-disable no-alert, no-console */")])]),t._v(" "),e("li",[t._v("在特定行禁用，"),e("code",[t._v("// eslint-disable-line")])]),t._v(" "),e("li",[t._v("在下一行禁用，"),e("code",[t._v("// eslint-disable-next-line")])])]),t._v(" "),e("h2",{attrs:{id:"eslint层叠配置原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#eslint层叠配置原理"}},[t._v("#")]),t._v(" ESLint层叠配置原理")]),t._v(" "),e("p",[t._v("eslint默认的配置文件搜索方式是：从目标文件夹进行搜索，遍历内部每一个文件夹，找到配置文件并层叠使用。再跳出本项目，往祖先文件夹进行遍历；")]),t._v(" "),e("p",[t._v("eslint的生效规则是：就近使用，离要检测的文件最近的"),e("code",[t._v(".eslintrc文件")]),t._v("作为最高优先级，越近的配置项优先级越高，覆盖其他配置项。如一个项目中，可以在不同文件夹中都添加配置文件，这些规则将重叠组合生效。")]),t._v(" "),e("p",[t._v("例如，假如你有以下结构：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("project\n├── .eslintrc\n├── package.json\n├── src\n│ └── source.js\n│ └── index.js\n└─┬ tests\n  ├── .eslintrc\n  └── test.js\n")])])]),e("p",[t._v("当你在这个项目中允许 ESLint 时，"),e("code",[t._v("src/")]),t._v(" 下面的所有文件将使用项目根目录里的 "),e("code",[t._v(".eslintrc")]),t._v(" 文件作为它的配置文件。当 ESLint 遍历到 "),e("code",[t._v("test/")]),t._v(" 目录，"),e("code",[t._v("project/.eslintrc")]),t._v(" 之外，它还会用到 "),e("code",[t._v("project/tests/.eslintrc")]),t._v("。所以 "),e("code",[t._v("project/tests/test.js")]),t._v(" 是基于它的目录层次结构中的两个"),e("code",[t._v(".eslintrc")]),t._v("文件的组合，并且离的最近的一个优先。通过这种方式，你可以有"),e("code",[t._v("项目级ESLint")]),t._v("设置，也有"),e("code",[t._v("覆盖特定目录的ESLint")]),t._v("设置。")]),t._v(" "),e("p",[t._v("同样的，如果在根目录的 "),e("code",[t._v("package.json")]),t._v(" 文件中有一个 "),e("code",[t._v("eslintConfig")]),t._v(" 字段，其中的配置将使用于所有子目录，但是当 "),e("code",[t._v("tests")]),t._v(" 目录下的 "),e("code",[t._v(".eslintrc")]),t._v(" 文件中的规则与之发生冲突时，就会覆盖它。")]),t._v(" "),e("h2",{attrs:{id:"eslint配置参数详解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#eslint配置参数详解"}},[t._v("#")]),t._v(" ESLint配置参数详解")]),t._v(" "),e("h3",{attrs:{id:"root参数-根目录标识"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#root参数-根目录标识"}},[t._v("#")]),t._v(" root参数: "),e("a",{attrs:{href:"http://eslint.cn/docs/user-guide/configuring#configuration-cascading-and-hierarchy",target:"_blank",rel:"noopener noreferrer"}},[t._v("根目录标识"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("默认情况下，ESLint 会在所有父级目录里寻找配置文件，一直到根目录。如果你想要你所有项目都遵循一个特定的约定时，这将会很有用，但有时候会导致意想不到的结果。为了将 ESLint 限制到一个特定的项目，在你项目根目录下的"),e("code",[t._v("package.json")]),t._v("文件里的"),e("code",[t._v("eslintConfig")]),t._v(" 字段下或者 "),e("code",[t._v(".eslintrc.*")]),t._v(" 文件里设置 "),e("code",[t._v("root: true")]),t._v("。ESLint 一旦发现配置文件中有 "),e("code",[t._v("root: true")]),t._v("，它就会停止在父级目录中寻找。")]),t._v(" "),e("h3",{attrs:{id:"parser-解析器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#parser-解析器"}},[t._v("#")]),t._v(" parser: "),e("a",{attrs:{href:"http://eslint.cn/docs/user-guide/configuring#specifying-parser",target:"_blank",rel:"noopener noreferrer"}},[t._v("解析器"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("ESLint 默认使用"),e("a",{attrs:{href:"https://github.com/eslint/espree",target:"_blank",rel:"noopener noreferrer"}},[t._v("Espree"),e("OutboundLink")],1),t._v("作为其解析器，你可以在配置文件中指定一个不同的解析器，只要该解析器符合下列要求：")]),t._v(" "),e("ol",[e("li",[t._v("它必须是一个 Node 模块，可以从它出现的配置文件中加载。通常，这意味着解析器是一个 npm 模块，即必须安装在本地的node_module中；")]),t._v(" "),e("li",[t._v("它必须符合 "),e("a",{attrs:{href:"http://eslint.cn/docs/developer-guide/working-with-plugins#working-with-custom-parsers",target:"_blank",rel:"noopener noreferrer"}},[t._v("parser interface"),e("OutboundLink")],1)])]),t._v(" "),e("p",[t._v("解析器是用于解析js代码的，对于如何去理解每一个表达式，有点类似于C++中编译器的概念。会先对js语句进行一些语法分析，语义分析什么的，然后才能判断语句符不符合规范，而不是通过简单的字符串对比。")]),t._v(" "),e("p",[t._v("正常情况下，我们会使用以下参数的一种作为我们的parser值：")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://github.com/eslint/espree",target:"_blank",rel:"noopener noreferrer"}},[t._v("Espree"),e("OutboundLink")],1),t._v("：默认解析器，一个从Esprima中分离出来的解析器，做了一些优化")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://www.npmjs.com/package/esprima",target:"_blank",rel:"noopener noreferrer"}},[t._v("Esprima"),e("OutboundLink")],1),t._v("：js标准解析器")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://www.npmjs.com/package/@babel/eslint-parser",target:"_blank",rel:"noopener noreferrer"}},[t._v("@babel/eslint-parser"),e("OutboundLink")],1),t._v("： 一个对"),e("a",{attrs:{href:"https://babeljs.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Babel"),e("OutboundLink")],1),t._v("解析器的包装，babel本身也是js解析器的一种（不然怎么能转化为兼容性代码呢？首先需要进行js解析，才能转化）。如果我们的代码需要经过babel转化，则对应使用这个解析器。")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://www.npmjs.com/package/@typescript-eslint/parser",target:"_blank",rel:"noopener noreferrer"}},[t._v("@typescript-eslint/parser"),e("OutboundLink")],1),t._v("： 将 TypeScript 转换成与 estree 兼容格式的解析器，以便在ESLint中使用。")])]),t._v(" "),e("p",[t._v("另外，如果我们是"),e("code",[t._v("vue")]),t._v("项目，通常会用到"),e("a",{attrs:{href:"https://www.npmjs.com/package/vue-eslint-parser",target:"_blank",rel:"noopener noreferrer"}},[t._v("vue-eslint-parser"),e("OutboundLink")],1),t._v("作为我们的解析器。")]),t._v(" "),e("h3",{attrs:{id:"parseroptions-解析器配置项"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#parseroptions-解析器配置项"}},[t._v("#")]),t._v(" parserOptions: "),e("a",{attrs:{href:"http://eslint.cn/docs/user-guide/configuring#specifying-parser-options",target:"_blank",rel:"noopener noreferrer"}},[t._v("解析器配置项"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("ESLint 允许你指定你想要支持的 JavaScript 语言选项。默认情况下，ESLint 支持 ECMAScript 5 语法。你可以覆盖该设置，以启用对 ECMAScript 其它版本和 JSX 的支持。设置解析器选项能帮助 ESLint 确定什么是解析错误。")]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"parserOptions"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"sourceType"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"module"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"ecmaVersion"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"ecmaFeatures"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"jsx"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("这里设置的配置项将会传递到解析器中，被解析器获取到，进行一定的处理。具体参数是否被用到，要看解析器的源码有没有对其进行处理。这里仅仅是做参数定义，做了规定，告诉解析器的开发者可能有这些参数。")]),t._v(" "),e("h4",{attrs:{id:"sourcetype"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sourcetype"}},[t._v("#")]),t._v(" sourceType")]),t._v(" "),e("p",[t._v("指定JS代码来源的类型，默认为"),e("code",[t._v("script")]),t._v("。")]),t._v(" "),e("ul",[e("li",[t._v("script(script标签引入？)")]),t._v(" "),e("li",[t._v("module（es模块ESM）")])]),t._v(" "),e("p",[t._v("为什么vue项目配合webpack打包工具的大多数会使用"),e("code",[t._v("script")]),t._v("呢？因为vue是通过"),e("code",[t._v("babel-loader")]),t._v("编译的，而babel编译后的代码就是script方式。")]),t._v(" "),e("h4",{attrs:{id:"ecmaversion"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ecmaversion"}},[t._v("#")]),t._v(" ecmaVersion")]),t._v(" "),e("p",[t._v("支持的ES语法版本，默认为5。你可以使用6、7、8、9、10或者年份命名的2015（同6）、2016（同7）、2017（同8）、2018（同 9）、2019 (同10)或latest来指定你想要使用的 ECMAScript 版本。")]),t._v(" "),e("p",[t._v("例如：对于 ES6 语法，使用")]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"parserOptions"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"ecmaVersion"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("但是，支持 ES6 新语法并不意味着同时支持新的 ES6 全局变量或类型（比如 "),e("code",[t._v("Set")]),t._v(" ）。对于新的 ES6 全局变量，则使用 "),e("code",[t._v('{ "env":{ "es6": true } }')]),t._v("。")]),t._v(" "),e("h4",{attrs:{id:"ecmafeatures"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ecmafeatures"}},[t._v("#")]),t._v(" ecmaFeatures")]),t._v(" "),e("p",[t._v("对象类型。Features是特征的意思，表示你想使用的额外的语言特性。 所有语言选项默认都是 "),e("code",[t._v("false")]),t._v("。")]),t._v(" "),e("ul",[e("li",[t._v("globalReturn - 允许在全局作用域下使用 return 语句")]),t._v(" "),e("li",[t._v("impliedStrict - 启用"),e("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode",target:"_blank",rel:"noopener noreferrer"}},[t._v("strict mode"),e("OutboundLink")],1),t._v("严格校验模式(如果 ecmaVersion 是 5 或更高)")]),t._v(" "),e("li",[t._v("jsx - 启用 JSX")]),t._v(" "),e("li",[t._v("experimentalObjectRestSpread - 启用实验性的 object "),e("a",{attrs:{href:"https://github.com/tc39/proposal-object-rest-spread",target:"_blank",rel:"noopener noreferrer"}},[t._v("rest/spread properties"),e("OutboundLink")],1),t._v(" 支持。(重要：这是一个实验性的功能,在未来可能会有明显改变。 建议你写的规则 不要 依赖该功能，除非当它发生改变时你愿意承担维护成本。)")])]),t._v(" "),e("h3",{attrs:{id:"env-运行环境"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#env-运行环境"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"http://eslint.cn/docs/user-guide/configuring#specifying-environments",target:"_blank",rel:"noopener noreferrer"}},[t._v("env"),e("OutboundLink")],1),t._v("：运行环境")]),t._v(" "),e("p",[t._v("环境定义了一组预定义的全局变量。获得了特定环境的全局定义，就不会认为是开发定义的，跳过对其的定义检测，否则会被认为改变量未定义。\n常见的运行环境有以下这些：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("browser")]),t._v("： 浏览器环境中的全局变量")]),t._v(" "),e("li",[e("code",[t._v("node")]),t._v("： Node.js 全局变量和 Node.js 作用域")]),t._v(" "),e("li",[e("code",[t._v("es6")]),t._v("： 启用除了 modules 以外的所有 ECMAScript 6 特性（该选项会自动设置 ecmaVersion 解析器选项为 6）")]),t._v(" "),e("li",[e("code",[t._v("commonjs")]),t._v("： CommonJS 全局变量和 CommonJS 作用域 (用于 Browserify/WebPack 打包的只在浏览器中运行的代码)")]),t._v(" "),e("li",[e("code",[t._v("jquery")]),t._v("：  jQuery 全局变量")])]),t._v(" "),e("h3",{attrs:{id:"globals-全局变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#globals-全局变量"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"http://eslint.cn/docs/user-guide/configuring#specifying-globals",target:"_blank",rel:"noopener noreferrer"}},[t._v("globals"),e("OutboundLink")],1),t._v("：全局变量")]),t._v(" "),e("p",[t._v("对象类型。添加开发者自定义的全局变量，使其跳过"),e("a",{attrs:{href:"https://eslint.cn/docs/rules/no-undef",target:"_blank",rel:"noopener noreferrer"}},[t._v("no-undef"),e("OutboundLink")],1),t._v("规则警告。")]),t._v(" "),e("ul",[e("li",[t._v("key值就是额外添加的全局变量；")]),t._v(" "),e("li",[t._v("value值用于标识该变量能否被重写；"),e("code",[t._v("true")]),t._v("和"),e("code",[t._v("writeable")]),t._v("为允许变量被重写；"),e("code",[t._v("false")]),t._v("和"),e("code",[t._v("readonly")]),t._v("为不允许被重写；"),e("code",[t._v("off")]),t._v("表示禁用该全局变量")])]),t._v(" "),e("h3",{attrs:{id:"plugins-插件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#plugins-插件"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"http://eslint.cn/docs/user-guide/configuring#configuring-plugins",target:"_blank",rel:"noopener noreferrer"}},[t._v("plugins"),e("OutboundLink")],1),t._v("：插件")]),t._v(" "),e("p",[t._v("ESLint 支持使用第三方插件。在使用插件之前，你必须使用 npm 安装它。"),e("strong",[t._v("插件的作用类似于解析器，用以扩展解析器的功能，用于检测非常规的js代码。也可能会新增一些特定的规则")]),t._v("。")]),t._v(" "),e("p",[t._v("在配置文件里配置插件时，可以使用 plugins 关键字来存放插件名字的列表。插件名称可以省略 "),e("code",[t._v("「eslint-plugin-」")]),t._v(" 前缀。")]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"plugins"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"vue"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("如：")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://github.com/vuejs/eslint-plugin-vue",target:"_blank",rel:"noopener noreferrer"}},[t._v("eslint-plugin-vue"),e("OutboundLink")],1),t._v("，是为了帮助我们检测"),e("code",[t._v(".vue")]),t._v("文件中 "),e("code",[t._v("<template>")]),t._v(" 和 "),e("code",[t._v("<script>")]),t._v(" 中的js代码；")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/jsx-eslint/eslint-plugin-react",target:"_blank",rel:"noopener noreferrer"}},[t._v("eslint-plugin-react"),e("OutboundLink")],1),t._v("则用于检测"),e("code",[t._v("JSX")]),t._v("文件中的代码，和react中特定的规则。")])]),t._v(" "),e("h3",{attrs:{id:"extends-规则继承"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#extends-规则继承"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"http://eslint.cn/docs/user-guide/configuring#extending-configuration-files",target:"_blank",rel:"noopener noreferrer"}},[t._v("extends"),e("OutboundLink")],1),t._v("：规则继承")]),t._v(" "),e("p",[t._v("字符串数组类型，每个配置项继承它前面的配置。")]),t._v(" "),e("p",[e("code",[t._v("extends")]),t._v(" 可继承的方式可以是如下几种：")]),t._v(" "),e("ul",[e("li",[t._v("eslint内置规则，即"),e("code",[t._v("「eslint:recommended」推荐规则")]),t._v(" 或"),e("code",[t._v("「eslint:all」")])]),t._v(" "),e("li",[t._v("可共享的配置， 是一个 "),e("code",[t._v("npm")]),t._v(" 包，它输出一个配置对象。即通过npm安装到node_module中")]),t._v(" "),e("li",[t._v("从插件中获取的规则，书写规则为 "),e("code",[t._v("「plugin:插件包名/配置名」")]),t._v("，其中插件包名也是可以忽略「eslint-plugin-」前缀。如"),e("code",[t._v("plugin:vue/essential")]),t._v(" 和 "),e("code",[t._v("plugin:vue/vue3-recommended")])]),t._v(" "),e("li",[t._v("从配置文件中继承，即继承另外的一个配置文件，如"),e("code",[t._v("./.eslintrc-auto-import.json")])]),t._v(" "),e("li")]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"extends"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"plugin:vue/vue3-recommended"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"airbnb-base"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./.eslintrc-auto-import.json"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h3",{attrs:{id:"settings-规则共享参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#settings-规则共享参数"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"http://eslint.cn/docs/user-guide/configuring#adding-shared-settings",target:"_blank",rel:"noopener noreferrer"}},[t._v("settings"),e("OutboundLink")],1),t._v("：规则共享参数")]),t._v(" "),e("p",[e("code",[t._v("settings对象")]),t._v("会当做参数传递给具体规则项（每个规则项都会被注入该变量），但对应规则而言，有没有用，就要看各个规则的设置。就好比 "),e("code",[t._v("parserOptions")]),t._v("，解析器用不用它就不知道了。这里只是提供这个方法。")]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"settings"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 「import/resolver」并不是eslint规则项，这里只是一个参数名，叫「import/resolver」，会传递给每个规则项。")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// settings并没有具体的书写规则，「import/」只是import模块自己起的名字，原则上，它直接命名为「resolver」也可以，加上「import」只是为了更好地区分。")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"import/resolver"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"alias"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"map"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n              "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./src"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"extensions"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('".js"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('".jsx"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('".ts"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('".tsx"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("如上面配置：\n因为"),e("a",{attrs:{href:"https://github.com/benmosher/eslint-plugin-import",target:"_blank",rel:"noopener noreferrer"}},[t._v("eslint-plugin-import"),e("OutboundLink")],1),t._v("插件很多规则项都用的这个配置项，所以并没有通过"),e("code",[t._v("rules")]),t._v("设置，而是通过"),e("code",[t._v("settings")]),t._v("共享。")]),t._v(" "),e("h3",{attrs:{id:"overrides-针对特定文件的配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#overrides-针对特定文件的配置"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"http://eslint.cn/docs/user-guide/configuring#configuration-based-on-glob-patterns",target:"_blank",rel:"noopener noreferrer"}},[t._v("overrides"),e("OutboundLink")],1),t._v("：针对特定文件的配置")]),t._v(" "),e("p",[t._v("对象数组类型。可以通过"),e("code",[t._v("overrides")]),t._v("对特定文件进行特定的eslint检测。配置项几乎与 ESLint 的其他配置相同，包含常规配置中的除了 "),e("code",[t._v("extends")]),t._v("、"),e("code",[t._v("overrides")]),t._v(" 和 "),e("code",[t._v("root")]),t._v(" 之外的其他任何有效配置选项。")]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"overrides"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"files"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"src/*.js"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"excludedFiles"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*.source.js"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"rules"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"quotes"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"error"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"single"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("在相同的配置文件中，"),e("code",[t._v("Glob 模式")]),t._v("覆盖比其他常规配置具有更高的优先级。 同一个配置中的多个覆盖将按顺序被应用。也就是说，配置文件中的最后一个覆盖会有最高优先级。")]),t._v(" "),e("h3",{attrs:{id:"rules-具体规则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rules-具体规则"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://eslint.cn/docs/user-guide/configuring#configuring-rules",target:"_blank",rel:"noopener noreferrer"}},[t._v("rules"),e("OutboundLink")],1),t._v("：具体规则")]),t._v(" "),e("p",[t._v("ESLint 附带有大量的规则。你可以使用注释或配置文件修改你项目中要使用的规则。要改变一个规则设置，你必须将规则 ID 设置为下列值之一：")]),t._v(" "),e("ul",[e("li",[t._v('"off" 或 0 - 关闭规则')]),t._v(" "),e("li",[t._v('"warn" 或 1 - 开启规则，使用警告级别的错误：warn (不会导致程序退出)')]),t._v(" "),e("li",[t._v('"error" 或 2 - 开启规则，使用错误级别的错误：error (当被触发的时候，程序会退出)')])]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"rules"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果一个规则有额外的选项，你可以使用数组字面量指定它们")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"quotes"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"error"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"double"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// xxx/aaa 这些规则是 xxx 插件自定的规则，在eslint官网是查不到的。需要到相应的插件官网中查阅")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如 import/extensions，这是「eslint-plugin-import」自定义的规则")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"import/extensions"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"error"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"always"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"js"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"never"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"vue"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"never"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"curly"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"error"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("在上面的配置中，规则 xxx/aaa 表示来自插件 xxx 的 aaa 规则。你也可以使用这种格式的注释配置在具体文件中进行配置，比如：")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/* eslint "xxx/aaa": "error" */')]),t._v("\n")])])]),e("p",[e("strong",[t._v("注意：当指定来自插件的规则时，确保删除 eslint-plugin- 前缀。ESLint 在内部只使用没有前缀的名称去定位规则。")])]),t._v(" "),e("p",[t._v("rules具体规则太多，就不在这做介绍了，有需要的同学可以上"),e("a",{attrs:{href:"http://eslint.cn/docs/rules/",target:"_blank",rel:"noopener noreferrer"}},[t._v("eslint官网"),e("OutboundLink")],1),t._v("查询")])])}),[],!1,null,null,null);s.default=r.exports}}]);