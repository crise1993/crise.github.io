(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{542:function(t,a,s){"use strict";s.r(a);var r=s(65),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"一文读懂http"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一文读懂http"}},[t._v("#")]),t._v(" 一文读懂http")]),t._v(" "),s("h2",{attrs:{id:"http请求报文"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http请求报文"}},[t._v("#")]),t._v(" http请求报文")]),t._v(" "),s("h3",{attrs:{id:"请求行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#请求行"}},[t._v("#")]),t._v(" 请求行")]),t._v(" "),s("p",[t._v("请求行包含请求方法、URL、协议版本。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("POST")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("chapter17"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("user"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("html "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTP")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.1")]),t._v("\n")])])]),s("p",[t._v("以上代码中“POST”代表请求方法，“/chapter17/user.html”表示 URL，“HTTP/1.1”代表协议和协议的版本。现在比较流行的是 Http1.1 版本。")]),t._v(" "),s("ul",[s("li",[t._v("请求方法包含 8 种：GET、POST、PUT、DELETE、PATCH、HEAD、OPTIONS、TRACE。")]),t._v(" "),s("li",[t._v("URL 即请求地址，由 <协议>：//<主机>：<端口>/<路径>?<参数> 组成")]),t._v(" "),s("li",[t._v("协议版本即 http 版本号")])]),t._v(" "),s("h3",{attrs:{id:"请求头"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#请求头"}},[t._v("#")]),t._v(" 请求头")]),t._v(" "),s("p",[t._v("请求头包含请求的附加信息，由关键字/值对组成，每行一对，关键字和值用英文冒号“:”分隔。")]),t._v(" "),s("p",[t._v("请求头部通知服务器有关于客户端请求的信息。它包含许多有关的客户端环境和请求正文的有用信息。其中比如：Host，表示主机名，虚拟主机；Connection,HTTP/1.1 增加的，使用 keep-alive，即持久连接，一个连接可以发多个请求；User-Agent，请求发出者，兼容性以及定制化需求。")]),t._v(" "),s("h3",{attrs:{id:"请求体"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#请求体"}},[t._v("#")]),t._v(" 请求体")]),t._v(" "),s("p",[t._v("请求体可以承载多个请求参数的数据，包含回车符、换行符和请求数据，并不是所有请求都具有请求数据")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("tom"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("password"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1234")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("realName"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("tomson\n")])])]),s("p",[t._v("上面代码，承载着 name、password、realName 三个请求参数。")]),t._v(" "),s("h2",{attrs:{id:"http响应报文"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http响应报文"}},[t._v("#")]),t._v(" http响应报文")]),t._v(" "),s("p",[t._v("响应报文由响应行（request line）、响应头部（header）、响应主体三个部分组成。")]),t._v(" "),s("h3",{attrs:{id:"状态行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#状态行"}},[t._v("#")]),t._v(" 状态行")]),t._v(" "),s("p",[t._v("响应行包含：协议版本，状态码，状态码描述")]),t._v(" "),s("p",[t._v("状态码规则如下：\n1xx：指示信息--表示请求已接收，继续处理。\n2xx：成功--表示请求已被成功接收、理解、接受。\n3xx：重定向--要完成请求必须进行更进一步的操作。\n4xx：客户端错误--请求有语法错误或请求无法实现。\n5xx：服务器端错误--服务器未能实现合法的请求。")]),t._v(" "),s("h3",{attrs:{id:"响应头部"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#响应头部"}},[t._v("#")]),t._v(" 响应头部")]),t._v(" "),s("p",[t._v("响应头部包含响应报文的附加信息，由 名/值 对组成")]),t._v(" "),s("h3",{attrs:{id:"响应体"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#响应体"}},[t._v("#")]),t._v(" 响应体")]),t._v(" "),s("p",[t._v("响应主体包含回车符、换行符和响应返回数据，并不是所有响应报文都有响应数据")]),t._v(" "),s("p",[t._v("Cache-Control指定请求和响应遵循的缓存机制。在请求消息或响应消息中设置Cache-Control并不会修改另一个消息处理过程中的缓存处理过程。请求时的缓存指令包括no-cache、no-store、max-age、max-stale、min-fresh、only-if-cached，响应消息中的指令包括public、private、no-cache、no-store、no-transform、must-revalidate、proxy-revalidate、max-age。各个消息中的指令含义如下")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("no-cache：指示请求或响应消息不能缓存")])]),t._v(" "),s("li",[s("p",[t._v("no-store：用于防止重要的信息被无意的发布。在请求消息中发送将使得请求和响应消息都不使用缓存。")])]),t._v(" "),s("li",[s("p",[t._v("must-revalidate：告诉浏览器、缓存服务器，本地副本过期前，可以使用本地副本；本地副本一旦过期，必须去源服务器进行有效性校验。")])]),t._v(" "),s("li",[s("p",[t._v("Public指示响应可被任何缓存区缓存")])]),t._v(" "),s("li",[s("p",[t._v("Private指示对于单个用户的整个或部分响应消息，不能被共享缓存处理。这允许服务器仅仅描述当用户的部分响应消息，此响应消息对于其他用户的请求无效")])]),t._v(" "),s("li",[s("p",[t._v("max-age指示客户机可以接收生存期不大于指定时间（以秒为单位）的响应")])]),t._v(" "),s("li",[s("p",[t._v("min-fresh指示客户机可以接收响应时间小于当前时间加上指定时间的响应")])]),t._v(" "),s("li",[s("p",[t._v("max-stale指示客户机可以接收超出超时期间的响应消息。如果指定max-stale消息的值，那么客户机可以接收超出超时期指定值之内的响应消息。")])])]),t._v(" "),s("h2",{attrs:{id:"http-1-x、http-2、http-3差别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-1-x、http-2、http-3差别"}},[t._v("#")]),t._v(" http/1.x、http/2、http/3差别")]),t._v(" "),s("p",[t._v("总体来说，HTTP/2 和 HTTP/3 相比于 HTTP/1.x 具有更好的性能和效率，尤其是在多路复用和头部压缩方面。HTTP/3 在传输层使用了 QUIC 协议，进一步改进了连接的性能和安全性。")]),t._v(" "),s("h3",{attrs:{id:"http-1-x"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-1-x"}},[t._v("#")]),t._v(" HTTP/1.x")]),t._v(" "),s("p",[t._v("HTTP/1.1 是当前广泛使用的版本。")]),t._v(" "),s("ul",[s("li",[t._v("基于文本，每个请求/响应都需要单独建立连接。")]),t._v(" "),s("li",[t._v("每个连接在单个请求/响应周期内都是串行的。")]),t._v(" "),s("li",[t._v("头部未经压缩发送，可能导致较大的网络开销。")]),t._v(" "),s("li",[t._v("没有对传输数据进行二进制分帧。")]),t._v(" "),s("li",[t._v("对于每个资源，需要单独的 TCP 连接，可能导致高延迟。")])]),t._v(" "),s("h3",{attrs:{id:"http-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-2"}},[t._v("#")]),t._v(" HTTP/2")]),t._v(" "),s("p",[t._v("二进制协议，与 HTTP/1.x 中的文本协议相比，更高效。")]),t._v(" "),s("ul",[s("li",[t._v("多路复用：允许在单个 TCP 连接上同时发送多个请求/响应，消除了串行请求的限制，提高了性能。")]),t._v(" "),s("li",[t._v("请求优先级和依赖关系：允许客户端指定请求的优先级，服务器可以根据优先级调整处理请求的顺序。")]),t._v(" "),s("li",[t._v("头部压缩：使用 HPACK 算法对头部进行压缩，减少了网络开销。")]),t._v(" "),s("li",[t._v("服务器推送：允许服务器在客户端请求之前将额外的资源推送给客户端，提高了加载性能。")])]),t._v(" "),s("h3",{attrs:{id:"http-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-3"}},[t._v("#")]),t._v(" HTTP/3")]),t._v(" "),s("p",[t._v("基于 QUIC 协议，QUIC 是一个基于 UDP 的传输协议，与 TCP 相比，QUIC 具有更低的连接建立和关闭延迟，并且支持连接迁移（连接可以从一个 IP 地址更改为另一个 IP 地址而不中断）。")]),t._v(" "),s("ul",[s("li",[t._v("多路复用：类似于 HTTP/2，允许在单个连接上并行发送多个请求和响应。")]),t._v(" "),s("li",[t._v("流量控制和拥塞控制：QUIC 内置了流量控制和拥塞控制功能，与 TCP 不同，它们被设计成与连接本身一起工作，而不是基于全局的 TCP 连接。")]),t._v(" "),s("li",[t._v("零 RTT（Round-Trip Time）连接建立：QUIC 允许在加密连接上进行零 RTT 数据传输，减少了连接建立时间。")]),t._v(" "),s("li",[t._v("头部压缩：类似于 HTTP/2，HTTP/3 也使用头部压缩来减少网络开销。")])]),t._v(" "),s("h2",{attrs:{id:"参考文档"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考文档"}},[t._v("#")]),t._v(" 参考文档")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://book.douban.com/subject/10746113/",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP权威指南"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://segmentfault.com/a/1190000016751071",target:"_blank",rel:"noopener noreferrer"}},[t._v("关于Http协议，你必须要知道的"),s("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=e.exports}}]);