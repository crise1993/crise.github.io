(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{480:function(t,s,a){t.exports=a.p+"assets/img/web-worker.192e4ae0.png"},481:function(t,s,a){t.exports=a.p+"assets/img/array-buffer.720e5ceb.png"},482:function(t,s,a){t.exports=a.p+"assets/img/thread-order.5ec3388b.png"},483:function(t,s,a){t.exports=a.p+"assets/img/thread-disorder.3540d91a.png"},484:function(t,s,a){t.exports=a.p+"assets/img/thread-atomics.8cc21134.png"},551:function(t,s,a){"use strict";a.r(s);var n=a(65),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"js中的多线程编程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#js中的多线程编程"}},[t._v("#")]),t._v(" JS中的多线程编程")]),t._v(" "),n("p",[t._v("有些人看到标题可能会立马产生疑问：JS 不是单线程嘛？JS中关于"),n("code",[t._v("IO/异步阻塞（setInterval/setTimeout、Promise、requestAnimationFrame, queueMicrotask等）")]),t._v("不是通过"),n("code",[t._v("事件循环（Event Loop）")]),t._v("来解决的吗？")]),t._v(" "),n("p",[t._v("的确，JS作为一门动态、解释型语言，是单线程的，所有的代码都由“主线程”依次执行，"),n("code",[t._v("IO/异步阻塞问题")]),t._v("通过事件循环来解决。这种"),n("strong",[t._v("单线程模型带来了一些优点，比如简单、易于理解、避免了死锁等问题")]),t._v("。然而，随着Web应用程序的复杂性和性能需求的增加，这套机制当线程需要处理大规模的计算的时候就不大适用了。")]),t._v(" "),n("h2",{attrs:{id:"单线程模型的局限性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#单线程模型的局限性"}},[t._v("#")]),t._v(" 单线程模型的局限性")]),t._v(" "),n("p",[t._v("单线程模型有明显的局限性，主要包括以下几个方面：")]),t._v(" "),n("ul",[n("li",[t._v("阻塞主线程：耗时任务会阻塞主线程，导致页面卡顿或失去响应，用户体验下降；")]),t._v(" "),n("li",[t._v("限制CPU利用率：JS单线程模型无法充分利用多核CPU的优势，无法实现真正的并行计算；")]),t._v(" "),n("li",[t._v("无法进行密集型计算：大量的计算任务会占用主线程，影响页面的渲染和交互；")])]),t._v(" "),n("p",[t._v("试想一下某个场景：")]),t._v(" "),n("ul",[n("li",[t._v("你需要实现对文件的加解密；")]),t._v(" "),n("li",[t._v("你的 "),n("code",[t._v("VirtualDom")]),t._v("树有很多元素（例如上万个），你需要对这棵树进行 "),n("code",[t._v("Diff操作")]),t._v("；")]),t._v(" "),n("li",[t._v("你需要在浏览器“挖矿”。")])]),t._v(" "),n("p",[t._v("上面这些场景都会阻塞主线程，也就是当进行这些操作的时候，你的页面大概率会卡住，而且当页面卡住一段时间后，Chrome 等浏览器会 Kill 掉当前的Tab进程。为了解决这些问题，JS引入了多线程编程模型，使得开发者可以利用多个线程并行执行任务。本文将深入探讨JS中的多线程编程技术，包括"),n("code",[t._v("Web Worker")]),t._v("、"),n("code",[t._v("SharedArrayBuffer")]),t._v("、"),n("code",[t._v("Atomics")]),t._v("等，并介绍如何在实际项目中应用这些技术来提高性能和响应能力。")]),t._v(" "),n("h2",{attrs:{id:"web-worker"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#web-worker"}},[t._v("#")]),t._v(" Web Worker")]),t._v(" "),n("p",[n("em",[n("strong",[t._v("Web Workers是一种在后台运行JS代码的机制，它允许在单独的线程中执行脚本，而不会阻塞主线程")])]),t._v("。Web Worker可以创建多个实例，并且与主线程之间通过消息传递进行通信。")]),t._v(" "),n("h3",{attrs:{id:"使用web-worker"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用web-worker"}},[t._v("#")]),t._v(" 使用Web Worker")]),t._v(" "),n("p",[t._v("使用 Web Worker 非常简单，只需要遵循以下几个步骤：")]),t._v(" "),n("ol",[n("li",[t._v("创建一个新的 JS 文件，其中包含要在 Web Worker 中执行的代码。")]),t._v(" "),n("li",[t._v("在主线程中使用 "),n("code",[t._v("new Worker()")]),t._v(" 构造函数创建一个 "),n("code",[t._v("Web Worker实例")]),t._v("，并指定要执行的脚本文件的 URL。")]),t._v(" "),n("li",[t._v("主线程通过 "),n("code",[t._v("postMessage()")]),t._v(" 方法向 Web Worker 发送消息，Web Worker 通过"),n("code",[t._v("onmessage")]),t._v("事件监听器接收消息并进行相应的处理。")]),t._v(" "),n("li",[t._v("Web Worker 执行完任务后，通过 "),n("code",[t._v("postMessage()")]),t._v(" 方法将结果发送回主线程，主线程通过 "),n("code",[t._v("onmessage")]),t._v(" 事件监听器接收并处理结果。")])]),t._v(" "),n("p",[t._v("下面是一个简单的使用示例：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 主线程main.js")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" worker "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Worker")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'worker.js'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nworker"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("postMessage")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello from main thread!'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nworker"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onmessage")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("event")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Message received from worker thread:'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// worker.js")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onmessage")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("event")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Message received from main thread:'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 执行耗时任务...")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Web Worker 也通过相应的实现 API 与主线程进行通信")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("postMessage")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello from worker!'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("h3",{attrs:{id:"应用场景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[t._v("#")]),t._v(" 应用场景")]),t._v(" "),n("p",[t._v("Web Workers 适用于许多应用场景，特别是需要处理大量数据或执行复杂计算任务的应用。一些常见的应用场景包括：")]),t._v(" "),n("ul",[n("li",[t._v("图像处理：在 Web Workers 中执行图像处理操作，如图像滤镜、缩放、裁剪等。")]),t._v(" "),n("li",[t._v("数据处理：使用 Web Workers 执行数据分析和处理任务，加快计算速度和提高数据处理效率。")]),t._v(" "),n("li",[t._v("游戏开发：在游戏开发中使用 Web Workers 执行物理模拟、碰撞检测、人工智能计算等任务。")]),t._v(" "),n("li",[t._v("大数据可视化：在大数据可视化应用中使用 Web Workers 处理大量数据并生成可视化图表。")])]),t._v(" "),n("h3",{attrs:{id:"web-worker-通信同步效率低与内存高"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#web-worker-通信同步效率低与内存高"}},[t._v("#")]),t._v(" Web Worker 通信同步效率低与内存高")]),t._v(" "),n("p",[t._v("主线程与 Web Worker 通过 postMessage 通信的时候，data 会先被 copy 一份再传给 Web Worker；同样地，当 Web Worker 通过 postMessage 与主线程通信的时候，data 也会同样先被 copy 一份再传给主线程。\n"),n("img",{attrs:{src:a(480),alt:"主线程VS工作线程"}}),t._v("\n这样做显然会导致通信上同步效率低与占用内存过高问题，试想一下你需要在 Web Worker 里面解压一个 1G 大小的问题，你需要把整个 1G 的文件 copy 到 Web Worker 里，Web Worker 解压完这个 1G 文件后，再把解压完的文件 copy 回主线程里。这整个流程不仅仅耗时长，同步效率慢，而且还会导致CPU内存资源占用过高。")]),t._v(" "),n("h2",{attrs:{id:"sharedarraybuffer"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sharedarraybuffer"}},[t._v("#")]),t._v(" SharedArrayBuffer")]),t._v(" "),n("p",[t._v("为了解决通信效率问题，浏览器提出了 ShareArrayBuffer，ShareArrayBuffer 基于 "),n("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",target:"_blank",rel:"noopener noreferrer"}},[t._v("ArrayBuffer"),n("OutboundLink")],1),t._v(" 和 "),n("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_%E5%AF%B9%E8%B1%A1",target:"_blank",rel:"noopener noreferrer"}},[t._v("TypedArray API"),n("OutboundLink")],1),t._v("。ArrayBuffer 对应一段内存（二进制内容），为了操作这段内存，浏览器需要提供一些视图（Int8Array 等），例如可以把这段内存当做每 8 位一个单元的 byte 数组，每 16 位一个单元的 16 位有符号数数组。\n"),n("img",{attrs:{src:a(481),alt:"arrayBuffer"}})]),n("figcaption",[t._v("ArrayBuffer 中的二进制流被翻译成各种视图的时候采用小端还是大端是由具体硬件决定的，绝大部分情况下是采用小端字节顺序")]),n("p"),t._v(" "),n("h3",{attrs:{id:"使用sharedarraybuffer"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用sharedarraybuffer"}},[t._v("#")]),t._v(" 使用SharedArrayBuffer")]),t._v(" "),n("p",[t._v("下面是一个简单的使用示例：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 主线程main.js")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" worker "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Worker")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'worker.js'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建一个4字节的共享内存区域")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" sharedBuffer "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SharedArrayBuffer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建一个Int8Array视图，用于操作共享内存")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" intArrBuffer "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int8Array")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sharedBuffer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("intArrBuffer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  intArrBuffer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("intArrBuffer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nworker"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("postMessage")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("intArrBuffer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nworker"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onmessage")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("event")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'更改后的数据:'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" intArrBuffer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// worker.js")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onmessage")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("event")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arrBuffer "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 执行耗时任务...")]),t._v("\n  arrBuffer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("88")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Web Worker 也通过相应的实现 API 与主线程进行通信")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("postMessage")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello from worker!'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),n("h3",{attrs:{id:"竞争问题-race-conditions"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#竞争问题-race-conditions"}},[t._v("#")]),t._v(" 竞争问题（Race Conditions）")]),t._v(" "),n("p",[t._v("这段内存可以在不同的 Worker 之间共享，但是如果多个线程同时修改共享内存又会产生"),n("code",[t._v("竞争问题（Race Conditions）")]),t._v("：\n**计算机指令对内存操作进行运算的时候，我们可以看做分两步：一是从内存中取值，二是运算并给某段内存赋值。**当我们有两个线程对同一个内存地址进行 +1 操作的时候，假设线程是按先后顺序运行的，为了简化模型，我们可以如下图表示：\n"),n("img",{attrs:{src:a(482),alt:"thread顺序修改"}}),t._v("\n上面两个线程的运行结果也符合我们的预期，也即线程分别都对同一地址进行了 +1 操作，最后得到结果 3。但因为两个线程是同时运行的，往往会发生下图所表示的问题，也即读取与写入可能不在一个事务中发生：\n"),n("img",{attrs:{src:a(483),alt:"thread无序修改"}}),t._v("\n这种情况就叫做"),n("code",[t._v("竞争问题（Race Conditions）")]),t._v("。")]),t._v(" "),n("h2",{attrs:{id:"automics-原子操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#automics-原子操作"}},[t._v("#")]),t._v(" Automics（原子操作）")]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("原子操作")]),t._v(" "),n("p",[t._v("当内存被共享时，多个线程能够读写内存上的同一数据。原子操作会确保正在读或写的数据的值是符合预期的，即下一个原子操作一定会在上一个原子操作结束后才会开始，其操作不会被中断。")])]),t._v(" "),n("p",[t._v("多线程只要存在，就会存在竞争，所以就必须有锁的概念。为了解决上述的竞争问题，浏览器提供了"),n("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Atomics",target:"_blank",rel:"noopener noreferrer"}},[t._v("Atomics API"),n("OutboundLink")],1),t._v("，这组 API 是一组对 SharedArrayBuffer 和 ArrayBuffer 对象执行原子操作的静态方法，可以将读取和写入绑定起来。")]),t._v(" "),n("h3",{attrs:{id:"automics-api"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#automics-api"}},[t._v("#")]),t._v(" Automics API")]),t._v(" "),n("ul",[n("li",[t._v("Atomics.load(typedArray, index)：返回数组中指定位置的值。")]),t._v(" "),n("li",[t._v("Atomics.store(typedArray, index, value)：将给定的值存储在数组中的指定位置，并返回该值。")]),t._v(" "),n("li",[t._v('Atomics.wait(typedArray, index, value, timeout)：验证共享内存特定位置是否仍然包含给定值，如果是则休眠，直到被唤醒或超时。其返回一个内容为 "ok"、"not-equal" 或 "timed-out" 的字符串。')]),t._v(" "),n("li",[t._v("Atomics.notify(typedArray, index, count)：唤醒一些在等待队列中休眠的代理。")]),t._v(" "),n("li",[t._v("Atomics.add(typedArray, index, value)：将给定的值加到数组里的指定位置上，并返回该位置的旧值。此原子操作保证在修改后的值写回之前不会发生其他写操作。")])]),t._v(" "),n("h3",{attrs:{id:"解决竞争问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#解决竞争问题"}},[t._v("#")]),t._v(" 解决竞争问题")]),t._v(" "),n("p",[t._v("例如下图中的 S1 到 S3 操作就被浏览器封装成 "),n("code",[t._v("Atomics.add()")]),t._v(" 这个 API，从而解决竞争问题。\n"),n("img",{attrs:{src:a(484),alt:"thread锁"}})]),t._v(" "),n("p",[t._v("下面是一个简单的使用示例：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 主线程main.js")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" worker "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Worker")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'worker.js'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建一个4字节的共享内存区域")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" sharedBuffer "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SharedArrayBuffer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建一个Int8Array视图，用于操作共享内存")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" intArrBuffer "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int8Array")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sharedBuffer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("intArrBuffer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  intArrBuffer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("intArrBuffer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nworker"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("postMessage")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("intArrBuffer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nworker"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onmessage")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("event")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'更改后的数据:'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" intArrBuffer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// worker.js")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onmessage")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("event")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arrBuffer "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 执行耗时任务...")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Atomics.add() 静态方法会将给定的值加到数组里的指定位置上，并返回该位置的旧值。此原子操作保证在修改后的值写回之前不会发生其他写操作。")]),t._v("\n  Atomics"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arrBuffer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Web Worker 也通过相应的实现 API 与主线程进行通信")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("postMessage")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello from worker!'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),n("h2",{attrs:{id:"参考文档"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考文档"}},[t._v("#")]),t._v(" 参考文档")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Atomics",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN"),n("OutboundLink")],1)]),t._v(" "),n("p",[n("a",{attrs:{href:"https://cloud.tencent.com/developer/article/1645568",target:"_blank",rel:"noopener noreferrer"}},[t._v("Javascript 多线程编程​的前世今生"),n("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=r.exports}}]);