(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{433:function(e,r,t){e.exports=t.p+"assets/img/chrome-process.423213ec.png"},434:function(e,r,t){e.exports=t.p+"assets/img/renderer-process.ac226c5a.png"},435:function(e,r,t){e.exports=t.p+"assets/img/render-independent.1a2bbf53.png"},436:function(e,r,t){e.exports=t.p+"assets/img/process-split.b023c03e.svg"},437:function(e,r,t){e.exports=t.p+"assets/img/site-isolate.58d4aefc.png"},530:function(e,r,t){"use strict";t.r(r);var a=t(65),v=Object(a.a)({},(function(){var e=this,r=e.$createElement,a=e._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"一文搞定浏览器架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一文搞定浏览器架构"}},[e._v("#")]),e._v(" 一文搞定浏览器架构")]),e._v(" "),a("p",[e._v("浏览器的主要功能就是向服务器发出请求，在浏览器窗口中展示您选择的网络资源。这里所说的资源一般是指 HTML 文档，也可以是 PDF、图片视频或其他的类型。资源的位置由用户使用 URI（统一资源标示符）指定。")]),e._v(" "),a("p",[e._v("如果你是一名前端开发者，那么你每天和浏览器相处的时间甚至要超过你的女朋友。甚至就连你一直无法舍弃的VSCode编辑器，也和浏览器有着莫大的联系。")]),e._v(" "),a("p",[e._v("本文主要聊聊浏览器的单进程/多进程架构模型，以及浏览器多进程架构优势。至于想了解浏览器内核的构成，可以点击查看"),a("RouterLink",{attrs:{to:"/blog/broswer/kernel.html#内核构成"}},[e._v("一文搞定浏览器内核")]),e._v("。")],1),e._v(" "),a("h2",{attrs:{id:"浏览器单进程架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器单进程架构"}},[e._v("#")]),e._v(" 浏览器单进程架构")]),e._v(" "),a("p",[e._v("浏览器的单进程模型是一种早期的浏览器架构，它在浏览器的整个生命周期中只使用一个进程来管理所有的标签页、插件和扩展。这意味着无论是浏览网页、执行 JavaScript、处理用户输入还是管理插件和扩展，所有的任务都由同一个进程负责。")]),e._v(" "),a("h3",{attrs:{id:"优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[e._v("#")]),e._v(" 优点")]),e._v(" "),a("h4",{attrs:{id:"简单性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简单性"}},[e._v("#")]),e._v(" 简单性")]),e._v(" "),a("p",[e._v("单进程模型的最大优点在于其简单性。由于只有一个进程在运行，因此管理和调度任务相对简单，不需要复杂的进程间通信或数据同步机制。这使得浏览器的设计和实现变得更加简单和直接。")]),e._v(" "),a("h3",{attrs:{id:"单进程模型的局限性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单进程模型的局限性"}},[e._v("#")]),e._v(" 单进程模型的局限性")]),e._v(" "),a("h4",{attrs:{id:"性能问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#性能问题"}},[e._v("#")]),e._v(" 性能问题")]),e._v(" "),a("p",[e._v("然而，单进程模型也存在一些局限性。最显著的是性能问题。由于所有的任务都在同一个进程中运行，当处理多个标签页或插件时，各个任务相互竞争抢夺CPU资源，这可能会导致浏览器的响应速度变慢，甚至出现卡顿现象。")]),e._v(" "),a("h4",{attrs:{id:"安全性风险"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安全性风险"}},[e._v("#")]),e._v(" 安全性风险")]),e._v(" "),a("p",[e._v("所有打开的标签页、插件和扩展共享相同的进程和系统资源，这意味着它们之间可以直接共享内存和数据。这就带来安全性风险。由于所有的内容都在同一个进程中运行，因此存在一个标签页或插件可能会访问其他标签页或插件的敏感数据，这就可能导致安全漏洞和用户数据泄露的风险。")]),e._v(" "),a("h2",{attrs:{id:"浏览器多进程架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器多进程架构"}},[e._v("#")]),e._v(" 浏览器多进程架构")]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),a("p",[e._v("chrome浏览器的"),a("code",[e._v("blink内核")]),e._v("在"),a("code",[e._v("webkit内核")]),e._v("基础上采用了多进程架构，safari浏览器最开始使用的是单进程，后来"),a("code",[e._v("webkit")]),e._v("升级成"),a("code",[e._v("webkit2")]),e._v("之后，也采用了多进程架构。")])]),e._v(" "),a("p",[e._v("使用IPC通信的多进程架构正好规避了这些缺点。通过将不同类型的任务分配到不同的进程中，浏览器多进程架构可以在某些情况下提供更好的性能和安全性。然而，这也会引入一些额外的系统开销，例如进程间通信和资源分配。因此，浏览器制造商需要在设计中权衡这些因素，以实现最佳的用户体验。不同浏览器可能在实现多进程架构时略有不同，但通常遵循类似的原则。")]),e._v(" "),a("h3",{attrs:{id:"chrome多进程介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#chrome多进程介绍"}},[e._v("#")]),e._v(" Chrome多进程介绍")]),e._v(" "),a("p",[e._v("如果您想查看 Chrome 中正在运行的进程数量，可以通过chrome窗口选项中的任务管理器进行查看。其中列出了当前正在运行的进程以及它们的内存占用空间以及CPU使用率。\n"),a("img",{attrs:{src:t(433),alt:"chrome多进程"}}),e._v(" "),e._v("\n当我们是要浏览一个网页，我们会在浏览器的地址栏里输入URL，这个时候"),a("code",[e._v("Browser Process")]),e._v("会向这个URL发送请求，获取这个URL的HTML内容，然后将HTML交给"),a("code",[e._v("Renderer Process")]),e._v("，"),a("code",[e._v("Renderer Process")]),e._v("解析HTML内容，解析遇到需要请求网络的资源又返回来交给Browser Process进行加载，同时通知"),a("code",[e._v("Browser Process")]),e._v("，需要"),a("code",[e._v("Plugin Process")]),e._v("加载插件资源，执行插件代码。解析完成后，"),a("code",[e._v("Renderer Process")]),e._v("计算得到"),a("code",[e._v("合成帧（compositor frame）")]),e._v("，并将这些合成帧交给"),a("code",[e._v("GPU Process")]),e._v("，"),a("code",[e._v("GPU Process")]),e._v("将其转化为图像显示屏幕。")]),e._v(" "),a("p",[e._v("从上图可以看出，在Chrome中，主要的进程类型有4种：")]),e._v(" "),a("h4",{attrs:{id:"浏览器主进程-browser-process"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器主进程-browser-process"}},[e._v("#")]),e._v(" 浏览器主进程 (Browser Process)")]),e._v(" "),a("blockquote",[a("p",[e._v("包括绘制浏览器按钮和输入字段的 "),a("code",[e._v("UI线程")]),e._v("、处理网络堆栈以从Internet接收数据的 "),a("code",[e._v("网络线程")]),e._v("、控制对文件的访问的"),a("code",[e._v("存储线程")]),e._v("等。当您在地址栏中键入 URL 时，您的输入由浏览器进程的 UI 线程处理。")])]),e._v(" "),a("p",[e._v("主进程是 Chrome 浏览器的核心，负责协调和管理浏览器以及页面的整个生命周期。主要功能如下：")]),e._v(" "),a("ul",[a("li",[a("red",[e._v("用户界面管理")]),e._v("：负责处理浏览器的用户界面，包括地址栏、书签栏、后退/前进按钮、标签页的打开和关闭等用户界面操作。")],1),e._v(" "),a("li",[a("red",[e._v("IPC进程通信")]),e._v("：负责启动、创建和销毁其他类型的进程（包括渲染进程、GPU 进程、插件进程、实用程序进程等），以及与其他进程之间进行通信，以确保它们之间的协调运作。")],1),e._v(" "),a("li",[a("red",[e._v("网络请求和资源管理")]),e._v("：还处理 Web 浏览器的不可见的特权部分，例如网络请求、域名解析、文件访问、Cookie 管理等；协调网络资源的下载、加载和处理，以确保用户获取所需的内容。")],1),e._v(" "),a("li",[a("red",[e._v("插件和扩展管理")]),e._v("：负责管理浏览器的扩展和插件系统，处理插件的加载、运行和交互；确保插件和扩展不会影响浏览器的稳定性和安全性。")],1),e._v(" "),a("li",[a("red",[e._v("安全性和权限管理")]),e._v("：负责管理浏览器的安全性，包括沙盒环境的设置和维护，以防止恶意代码对系统的访问；还负责处理用户权限，确保用户数据的隐私和保护。\n")],1)]),e._v(" "),a("p",[e._v("在内存资源足够时，浏览器进程会将网络线程、存储线程、设备线程等拆分成单独的 "),a("code",[e._v("实用程序进程（Utility Process）")]),e._v("（"),a("underline",[e._v("Utility Process 是一种特殊类型的进程，用于执行一些特定的任务和功能。实用进程执行不同于渲染页面内容的任务，这些任务可能需要较高的特权级别或访问系统资源")]),e._v("），甚至UI线程以及每个用到的 "),a("code",[e._v("扩展程序（Extension Process）")]),e._v(" 都会创建一个单独的进程。")],1),e._v(" "),a("h5",{attrs:{id:"ui-process-ui进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ui-process-ui进程"}},[e._v("#")]),e._v(" UI Process（UI进程）")]),e._v(" "),a("ul",[a("li",[e._v("UI进程负责管理和绘制浏览器的用户界面元素，如地址栏、标签页、按钮、工具栏等。")]),e._v(" "),a("li",[e._v("将GPU合成处理后的"),a("code",[e._v("bitMap(位图)")]),e._v("，呈现到用户界面上，它确保界面元素正确显示、布局和交互，以便用户可以与浏览器进行交互。")])]),e._v(" "),a("h5",{attrs:{id:"network-service-网络进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#network-service-网络进程"}},[e._v("#")]),e._v(" Network Service（网络进程）")]),e._v(" "),a("ul",[a("li",[e._v("网络服务进程负责处理所有网络请求，包括发送和接收 HTTP 请求。")]),e._v(" "),a("li",[e._v("这个进程在一个独立的沙盒环境中运行，将网络请求与其他进程隔离开来，以增加安全性并防止恶意代码访问用户的敏感数据。")]),e._v(" "),a("li",[e._v("网络服务进程也处理域名解析、代理设置和其他与网络通信相关的任务。")])]),e._v(" "),a("h5",{attrs:{id:"storage-service-存储进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#storage-service-存储进程"}},[e._v("#")]),e._v(" Storage Service（存储进程）")]),e._v(" "),a("ul",[a("li",[e._v("存储服务进程负责处理浏览器的存储相关任务，如文件读写，访问和管理本地存储、缓存等。")]),e._v(" "),a("li",[e._v("它提供了一个统一的接口，用于管理各种类型的存储，包括本地文件系统、IndexedDB（本地数据库）等。")])]),e._v(" "),a("h5",{attrs:{id:"audio-service-音频服务进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#audio-service-音频服务进程"}},[e._v("#")]),e._v(" Audio Service（音频服务进程）")]),e._v(" "),a("ul",[a("li",[e._v("音频服务进程处理浏览器中与音频相关的任务，包括音频播放、录制和通信。")]),e._v(" "),a("li",[e._v("这个进程的存在有助于确保音频操作不会干扰到其他任务，同时提高了浏览器的稳定性和性能。")])]),e._v(" "),a("h5",{attrs:{id:"tracing-service-追踪服务进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tracing-service-追踪服务进程"}},[e._v("#")]),e._v(" Tracing Service（追踪服务进程）")]),e._v(" "),a("ul",[a("li",[e._v("追踪服务进程负责处理性能和调试追踪相关的任务，帮助开发人员分析浏览器的性能问题。")]),e._v(" "),a("li",[e._v("它可以生成性能分析数据，用于识别瓶颈并优化浏览器的性能。")])]),e._v(" "),a("h4",{attrs:{id:"渲染进程-renderer-process"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#渲染进程-renderer-process"}},[e._v("#")]),e._v(" 渲染进程 (Renderer Process)")]),e._v(" "),a("blockquote",[a("p",[e._v("Chrome默认会为每个Tab页面分配一个渲染进程，甚至会为每个Tab页面的"),a("code",[e._v("iframe标签")]),e._v("启动一个单独的渲染进程（开启了"),a("code",[e._v("站点隔离")]),e._v("的chrome版本）。"),a("br"),e._v("\n浏览器有时会将多个渲染进程合并（譬如打开多个空白/崩溃/重启未加载的标签页后，会发现多个标签页被合并成了一个进程；或者运行在资源有限的设备上时，也会将同一站点服务聚合到一个进程中节省内存占用）。")])]),e._v(" "),a("p",[a("img",{attrs:{src:t(434),alt:"渲染进程"}}),e._v(" "),e._v("\n渲染进程负责一个Tab内显示相关的工作，主要作用为页面渲染，脚本执行，事件处理等。其中包括多个线程：")]),e._v(" "),a("h5",{attrs:{id:"主线程-worker-thread"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主线程-worker-thread"}},[e._v("#")]),e._v(" 主线程（Worker Thread）")]),e._v(" "),a("ul",[a("li",[e._v("主线程是渲染进程的核心，负责解析HTML、CSS 和 JavaScript，构建DOM树和RenderObject树，布局和生成绘制列表等，并执行网页的渲染和交互。当界面需要重绘（Repaint）或由于某种操作引发回流(reflow)时，该线程就会执行。")]),e._v(" "),a("li",[e._v("管理网页的布局和绘制，响应用户的输入事件，如鼠标点击和键盘输入。")]),e._v(" "),a("li",[e._v("主线程也执行 JavaScript 代码，处理 DOM 操作和事件处理。")])]),e._v(" "),a("h5",{attrs:{id:"工作线程-worker-thread"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工作线程-worker-thread"}},[e._v("#")]),e._v(" 工作线程（Worker Thread）")]),e._v(" "),a("ul",[a("li",[e._v("工作线程允许在后台执行复杂的 JavaScript 代码，以避免主线程阻塞。")]),e._v(" "),a("li",[e._v("它们可以进行计算密集型任务，而不影响主线程的响应性能。")])]),e._v(" "),a("p",[e._v("可以将复杂的JavaScript计算逻辑放入"),a("code",[e._v("Web Worker")]),e._v("或"),a("code",[e._v("Service Worker")]),e._v("中，这时候就会用到Worker Thread进行处理。")]),e._v(" "),a("h5",{attrs:{id:"栅格线程-raster-thread"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#栅格线程-raster-thread"}},[e._v("#")]),e._v(" 栅格线程（Raster Thread）")]),e._v(" "),a("p",[e._v("也叫"),a("code",[e._v("Compositor Tile Worker")]),e._v("，可能有一个或多个线程，比如PC端的chrome是2个或4个，安卓和safari为1个或2个不等。是由合成线程创建的，专门用来处理"),a("code",[e._v("纹理(tile)")]),e._v("的"),a("code",[e._v("光栅化(Rasterization)")]),e._v("。")]),e._v(" "),a("h5",{attrs:{id:"合成线程-compositor-thread"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合成线程-compositor-thread"}},[e._v("#")]),e._v(" 合成线程（Compositor Thread）")]),e._v(" "),a("ul",[a("li",[e._v("负责接收浏览器传来的垂直同步信号("),a("code",[e._v("Vsync")]),e._v("，水平同步表示画出一行屏幕线，垂直同步就表示从屏幕顶部到底部的绘制已经完成，指示着前一帧的结束，和新一帧的开始)。")]),e._v(" "),a("li",[e._v("也负责接收OS传来的用户交互，比如滚动、输入、点击、鼠标移动等等：\n"),a("ul",[a("li",[e._v("如果可能，合成线程会直接负责处理这些输入，然后转换为对"),a("code",[e._v("layer图层")]),e._v("的位移和处理，生成若干个"),a("code",[e._v("图块(tile)")]),e._v("，栅格线程将图块转化成"),a("code",[e._v("位图(bitMap)")]),e._v("，然后合成线程收集接收到的"),a("code",[e._v("Draw Quads")]),e._v("信息并创建"),a("code",[e._v("合成帧(Compositor frame)")]),e._v("并将新的帧通过IPC管道commit到 "),a("code",[e._v("GPU进程(GPU Process)")]),e._v("，GPU生成一个大的纹理，最后draw到屏幕上；")]),e._v(" "),a("li",[e._v("否则，比如你在滚动、输入事件等等上注册了回调，又或者当前页面中有动画等情况，那么这个时候合成线程便会唤醒"),a("code",[e._v("主线程(Main Thread)")]),e._v("，让后者去执行JS、完成重排、重绘等过程，更新"),a("code",[e._v("layer图层")]),e._v("，然后合成线程再进行上述步骤最终输出新的合成帧commit至"),a("code",[e._v("GPU Process")]),e._v("，完成输出。")])])])]),e._v(" "),a("h4",{attrs:{id:"gpu进程-gpu-process"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gpu进程-gpu-process"}},[e._v("#")]),e._v(" GPU进程 (GPU Process)")]),e._v(" "),a("p",[e._v("整个浏览器共用一个。负责处理和转发到GPU中的绘制命令（把渲染进程中绘制好的位图作为纹理上传至GPU，并调用GPU的相关方法把纹理合并渲染成一个位图，然后draw到屏幕上）。GPU进程工作于CPU中（而不是工作在GPU中），更应该称为“负责跟GPU打交道的进程”。GPU进程中只有一个"),a("code",[e._v("GPU线程")]),e._v("。")]),e._v(" "),a("h4",{attrs:{id:"插件进程-plugin-process"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插件进程-plugin-process"}},[e._v("#")]),e._v(" 插件进程 (Plugin Process)")]),e._v(" "),a("p",[e._v("如果浏览器支持第三方插件（如 Adobe Flash Player），插件通常会在单独的插件进程中运行。这可以减少插件崩溃对浏览器整体的影响。\n")]),e._v(" "),a("h3",{attrs:{id:"多进程架构优势"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多进程架构优势"}},[e._v("#")]),e._v(" 多进程架构优势")]),e._v(" "),a("h4",{attrs:{id:"_1、容错性高-稳定性强"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、容错性高-稳定性强"}},[e._v("#")]),e._v(" 1、容错性高，稳定性强")]),e._v(" "),a("p",[a("img",{attrs:{src:t(435),alt:"选项卡渲染进程独立"}}),e._v(" "),e._v("\nChrome 为每个选项卡分配自己的渲染进程。如果一个选项卡变得无响应，那么可以关闭无响应的选项卡，同时保持其他选项卡处于活动状态。如果所有选项卡都在一个进程上运行，则当一个选项卡无响应时，所有选项卡均无响应。")]),e._v(" "),a("p",[e._v("在插件的实现中，html和js的规则是非常松散的，不管浏览器考虑的边界条件多完备，总是有各种奇怪的东西需要解析和兼容，随便一个小错误就会导致卡死或者崩溃，所以为每个插件对应启动一个新进程，插件的崩溃就只会影响到自身。")]),e._v(" "),a("h4",{attrs:{id:"_2、安全性和沙箱机制-sandbox"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、安全性和沙箱机制-sandbox"}},[e._v("#")]),e._v(" 2、安全性和沙箱机制（Sandbox）")]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),a("p",[e._v("渲染引擎会经常性的在网络上遇到不可信、甚至是恶意的代码，它们会利用这些漏洞在你的电脑上安装恶意的软件。如果有一种机制，"),a("em",[a("strong",[e._v("将网页的运行限制在一个特定的环境中，也就是一个沙箱中，使它只能访问有限的功能。那么，即使网页工作的渲染引擎被攻击，它也不能够获取渲染引擎工作的主机系统中的任何权限，这一思想就是沙箱模型")])]),e._v("。")]),e._v(" "),a("p",[e._v("操作系统层面的沙箱的含义就是："),a("red",[e._v("操作系统对进程的可访问的内存地址所做的限制，限制进程可访问的内存在其被分配的内存地址区间内，而不允许操作其他的内存地址，从而提供安全层面的防护")]),e._v("。到浏览器层面，本质原理没多大变化，实践层面可能会根据浏览器环境有所变化，比如限制脚本操作本页面之外的其他页面的DOM，限制访问非同源文档，限制向非同源服务器发送ajax等等，目的依然是安全。")],1)]),e._v(" "),a("p",[e._v("把浏览器工作分成多个进程的另一好处是安全性与沙箱化。由于操作系统提供了限制进程权限的方法，因此浏览器可以对某些进程的某些功能进行沙箱处理，比如限制子进程（渲染进程、插件进程、GPU进程等）直接访问系统资源，限制子进程只能被某些或者很少的系统调用而且不能直接访问用户数据，这有助于保护用户免受不受信任和潜在恶意Web内容的攻击。")]),e._v(" "),a("p",[e._v("chromium 的沙箱机制是将渲染进程作为防护对象，browser进程会给每个渲染进程分配资源，但这些渲染进程只能访问被分配的资源，不能访问未被分配的资源，网页代码如果要与浏览器内核进程通信、与操作系统通信都需要通过 "),a("code",[e._v("IPC channel")]),e._v("，在其中会进行一些安全检查。")]),e._v(" "),a("h4",{attrs:{id:"_3、服务化特性-soa面向服务架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、服务化特性-soa面向服务架构"}},[e._v("#")]),e._v(" 3、服务化特性（SOA面向服务架构）")]),e._v(" "),a("p",[e._v("因为进程有自己的私有内存空间，它们通常会包含通用基础设施的副本（例如V8引擎）。这意味着更多的内存使用，因为它们不能像在同一进程中的线程那样共享数据。为了节省内存，Chrome 限制了浏览器可以启动的渲染进程数。限制取决于您的设备拥有多少内存和 CPU 能力，当 Chrome 达到限制时，它会开始在一个进程中运行来自同一站点的多个选项卡（所以这时，隔离性就会被影响）。\n"),a("img",{attrs:{src:t(436),alt:"进程合成/拆分"}}),e._v("\n为了解决"),a("code",[e._v("资源占用")]),e._v("和"),a("code",[e._v("体系架构复杂")]),e._v("的问题，Chrome官方团队2016 年使用 "),a("code",[e._v("SOA")]),e._v(" 思想设计了新的 Chrome 架构，当 Chrome 在强大的硬件上运行时，它会将每个服务拆分为不同的进程以提供更高的稳定性，服务之间直接通过IPC进行通信（IPC 允许不同进程在隔离的环境中协同工作，实现功能的分离和隔离）；但如果它在资源受限的设备上，Chrome 会将服务整合到单个浏览器进程中以节省内存占用。在这一架构变革实现前，Android 等平台上已经使用了类似的整合进程以减少内存使用的方案。")]),e._v(" "),a("h4",{attrs:{id:"_4、站点隔离"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、站点隔离"}},[e._v("#")]),e._v(" 4、站点隔离")]),e._v(" "),a("p",[a("img",{attrs:{src:t(437),alt:"站点隔离"}}),e._v(" "),a("strong",[e._v("站点隔离")]),e._v("是 Chrome 中最近引入的一项功能，它为每个"),a("code",[e._v("跨站点 iframe")]),e._v(" 启动单独的渲染进程，并在不同站点之间共享内存空间，这从根本上扭转了iframe互相通信的形式。我们原先一直讨论每个选项卡一个渲染进程，假如在同一个渲染进程中运行 "),a("code",[e._v("a.com")]),e._v(" 和 "),a("code",[e._v("b.com")]),e._v(" 似乎没问题，但是为安全攻击带来了很多可能。")]),e._v(" "),a("p",[e._v("大多数"),a("a",{attrs:{href:"https://storage.googleapis.com/pub-tools-public-publication-data/pdf/f5a8289d4f69e9e34b38a1e7c05ef4818b22cd5b.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("UXSS攻击"),a("OutboundLink")],1),e._v("都是通过绕过在渲染进程中实现的"),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy",target:"_blank",rel:"noopener noreferrer"}},[e._v("同源策略"),a("OutboundLink")],1),e._v("的存在检查来实现的（同源策略是网络的核心安全模型，它确保一个站点在未经同意的情况下无法访问其他站点的数据，绕过此策略是安全攻击的主要手段）。站点隔离通过隔离进程从根本上改变了这一点，也就是说，即使您可以绕过同源策略检查，其他站点的数据也无法在同一进程中使用。")]),e._v(" "),a("p",[e._v("另外由于"),a("a",{attrs:{href:"https://developer.chrome.com/blog/meltdown-spectre/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Meltdown和Spectre漏洞"),a("OutboundLink")],1),e._v("的存在（CPU内存管理技术设计漏洞），我们也需要使用进程隔离来分隔站点。自 Chrome 67 起，默认情况下在桌面上启用站点隔离，选项卡中的每个跨站点 iframe 都会获得一个单独的渲染进程。")]),e._v(" "),a("h2",{attrs:{id:"参考文档"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文档"}},[e._v("#")]),e._v(" 参考文档")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/qq_40121580/article/details/107144304",target:"_blank",rel:"noopener noreferrer"}},[e._v("CPU，缓存，内存，外存全解析"),a("OutboundLink")],1)]),e._v(" "),a("p",[a("a",{attrs:{href:"https://developer.chrome.com/blog/inside-browser-part1",target:"_blank",rel:"noopener noreferrer"}},[e._v("Inside look at modern web browser"),a("OutboundLink")],1)]),e._v(" "),a("p",[a("a",{attrs:{href:"https://www.4hou.com/shop/posts/9GQx",target:"_blank",rel:"noopener noreferrer"}},[e._v("深度剖析站点隔离机制1"),a("OutboundLink")],1)]),e._v(" "),a("p",[a("a",{attrs:{href:"https://www.4hou.com/posts/vRom",target:"_blank",rel:"noopener noreferrer"}},[e._v("深度剖析站点隔离机制2"),a("OutboundLink")],1)]),e._v(" "),a("p",[a("a",{attrs:{href:"https://www.4hou.com/index.php/posts/w2mR",target:"_blank",rel:"noopener noreferrer"}},[e._v("深度剖析站点隔离机制3"),a("OutboundLink")],1)]),e._v(" "),a("p",[a("a",{attrs:{href:"https://book.douban.com/subject/25910556/",target:"_blank",rel:"noopener noreferrer"}},[e._v("WebKit技术内幕"),a("OutboundLink")],1)]),e._v(" "),a("p",[a("a",{attrs:{href:"https://book.douban.com/subject/10546925/",target:"_blank",rel:"noopener noreferrer"}},[e._v("白帽子讲Web安全"),a("OutboundLink")],1)])])}),[],!1,null,null,null);r.default=v.exports}}]);